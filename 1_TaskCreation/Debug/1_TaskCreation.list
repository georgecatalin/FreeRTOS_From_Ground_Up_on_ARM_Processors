
1_TaskCreation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ad4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08003c84  08003c84  00013c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d54  08003d54  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003d54  08003d54  00013d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d5c  08003d5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d5c  08003d5c  00013d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d60  08003d60  00013d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000054c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005bc  200005bc  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015133  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002927  00000000  00000000  000351d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e8  00000000  00000000  00037b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010f0  00000000  00000000  00038ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000042de  00000000  00000000  00039dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000134b7  00000000  00000000  0003e0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb9e9  00000000  00000000  0005156d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013cf56  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000531c  00000000  00000000  0013cfa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003c6c 	.word	0x08003c6c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003c6c 	.word	0x08003c6c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__io_putchar>:


UART_HandleTypeDef huart3;

int __io_putchar(int ch)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, 0xFFFF);
 800059c:	1d39      	adds	r1, r7, #4
 800059e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a2:	2201      	movs	r2, #1
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <__io_putchar+0x20>)
 80005a6:	f001 fe08 	bl	80021ba <HAL_UART_Transmit>
	return ch;
 80005aa:	687b      	ldr	r3, [r7, #4]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	2000008c 	.word	0x2000008c

080005b8 <main>:
static void MX_USART3_UART_Init(void);



int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  HAL_Init();
 80005bc:	f000 fb4e 	bl	8000c5c <HAL_Init>

  SystemClock_Config();
 80005c0:	f000 f80a 	bl	80005d8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f89c 	bl	8000700 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005c8:	f000 f870 	bl	80006ac <MX_USART3_UART_Init>

  while (1)
  {
	  printf("Hello from STM32, Hombre. \n\r");
 80005cc:	4801      	ldr	r0, [pc, #4]	; (80005d4 <main+0x1c>)
 80005ce:	f002 fbbf 	bl	8002d50 <iprintf>
 80005d2:	e7fb      	b.n	80005cc <main+0x14>
 80005d4:	08003c84 	.word	0x08003c84

080005d8 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fbaa 	bl	8002d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a27      	ldr	r2, [pc, #156]	; (80006a4 <SystemClock_Config+0xcc>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <SystemClock_Config+0xcc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a21      	ldr	r2, [pc, #132]	; (80006a8 <SystemClock_Config+0xd0>)
 8000622:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000638:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000648:	2304      	movs	r3, #4
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800064c:	23a8      	movs	r3, #168	; 0xa8
 800064e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000654:	2307      	movs	r3, #7
 8000656:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fde7 	bl	8001230 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000668:	f000 f90a 	bl	8000880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2302      	movs	r3, #2
 8000672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000678:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800067c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000682:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2105      	movs	r1, #5
 800068a:	4618      	mov	r0, r3
 800068c:	f001 f848 	bl	8001720 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000696:	f000 f8f3 	bl	8000880 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	; 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_USART3_UART_Init+0x50>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USART3_UART_Init+0x4c>)
 80006e4:	f001 fd1c 	bl	8002120 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006ee:	f000 f8c7 	bl	8000880 <Error_Handler>
  }

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000008c 	.word	0x2000008c
 80006fc:	40004800 	.word	0x40004800

08000700 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08c      	sub	sp, #48	; 0x30
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	61bb      	str	r3, [r7, #24]
 800071a:	4b4c      	ldr	r3, [pc, #304]	; (800084c <MX_GPIO_Init+0x14c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a4b      	ldr	r2, [pc, #300]	; (800084c <MX_GPIO_Init+0x14c>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b49      	ldr	r3, [pc, #292]	; (800084c <MX_GPIO_Init+0x14c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	61bb      	str	r3, [r7, #24]
 8000730:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	4b45      	ldr	r3, [pc, #276]	; (800084c <MX_GPIO_Init+0x14c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a44      	ldr	r2, [pc, #272]	; (800084c <MX_GPIO_Init+0x14c>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b42      	ldr	r3, [pc, #264]	; (800084c <MX_GPIO_Init+0x14c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	4b3e      	ldr	r3, [pc, #248]	; (800084c <MX_GPIO_Init+0x14c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a3d      	ldr	r2, [pc, #244]	; (800084c <MX_GPIO_Init+0x14c>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b3b      	ldr	r3, [pc, #236]	; (800084c <MX_GPIO_Init+0x14c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	4b37      	ldr	r3, [pc, #220]	; (800084c <MX_GPIO_Init+0x14c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a36      	ldr	r2, [pc, #216]	; (800084c <MX_GPIO_Init+0x14c>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b34      	ldr	r3, [pc, #208]	; (800084c <MX_GPIO_Init+0x14c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	4b30      	ldr	r3, [pc, #192]	; (800084c <MX_GPIO_Init+0x14c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a2f      	ldr	r2, [pc, #188]	; (800084c <MX_GPIO_Init+0x14c>)
 8000790:	f043 0308 	orr.w	r3, r3, #8
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b2d      	ldr	r3, [pc, #180]	; (800084c <MX_GPIO_Init+0x14c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b29      	ldr	r3, [pc, #164]	; (800084c <MX_GPIO_Init+0x14c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a28      	ldr	r2, [pc, #160]	; (800084c <MX_GPIO_Init+0x14c>)
 80007ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <MX_GPIO_Init+0x14c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f244 0181 	movw	r1, #16513	; 0x4081
 80007c4:	4822      	ldr	r0, [pc, #136]	; (8000850 <MX_GPIO_Init+0x150>)
 80007c6:	f000 fd19 	bl	80011fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2140      	movs	r1, #64	; 0x40
 80007ce:	4821      	ldr	r0, [pc, #132]	; (8000854 <MX_GPIO_Init+0x154>)
 80007d0:	f000 fd14 	bl	80011fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	481b      	ldr	r0, [pc, #108]	; (8000858 <MX_GPIO_Init+0x158>)
 80007ec:	f000 fb5a 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007f0:	f244 0381 	movw	r3, #16513	; 0x4081
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	4811      	ldr	r0, [pc, #68]	; (8000850 <MX_GPIO_Init+0x150>)
 800080a:	f000 fb4b 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800080e:	2340      	movs	r3, #64	; 0x40
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <MX_GPIO_Init+0x154>)
 8000826:	f000 fb3d 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800082a:	2380      	movs	r3, #128	; 0x80
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_GPIO_Init+0x154>)
 800083e:	f000 fb31 	bl	8000ea4 <HAL_GPIO_Init>

}
 8000842:	bf00      	nop
 8000844:	3730      	adds	r7, #48	; 0x30
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40020400 	.word	0x40020400
 8000854:	40021800 	.word	0x40021800
 8000858:	40020800 	.word	0x40020800

0800085c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a04      	ldr	r2, [pc, #16]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d101      	bne.n	8000872 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800086e:	f000 fa17 	bl	8000ca0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40010000 	.word	0x40010000

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	e7fe      	b.n	8000888 <Error_Handler+0x8>
	...

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_MspInit+0x54>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	4a11      	ldr	r2, [pc, #68]	; (80008e0 <HAL_MspInit+0x54>)
 800089c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a0:	6453      	str	r3, [r2, #68]	; 0x44
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <HAL_MspInit+0x54>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <HAL_MspInit+0x54>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <HAL_MspInit+0x54>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008bc:	6413      	str	r3, [r2, #64]	; 0x40
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <HAL_MspInit+0x54>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	210f      	movs	r1, #15
 80008ce:	f06f 0001 	mvn.w	r0, #1
 80008d2:	f000 fabd 	bl	8000e50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a19      	ldr	r2, [pc, #100]	; (8000968 <HAL_UART_MspInit+0x84>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d12c      	bne.n	8000960 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <HAL_UART_MspInit+0x88>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a17      	ldr	r2, [pc, #92]	; (800096c <HAL_UART_MspInit+0x88>)
 8000910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <HAL_UART_MspInit+0x88>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_UART_MspInit+0x88>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <HAL_UART_MspInit+0x88>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_UART_MspInit+0x88>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800093e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000950:	2307      	movs	r3, #7
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4619      	mov	r1, r3
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <HAL_UART_MspInit+0x8c>)
 800095c:	f000 faa2 	bl	8000ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000960:	bf00      	nop
 8000962:	3728      	adds	r7, #40	; 0x28
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40004800 	.word	0x40004800
 800096c:	40023800 	.word	0x40023800
 8000970:	40020c00 	.word	0x40020c00

08000974 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	; 0x30
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	4b2f      	ldr	r3, [pc, #188]	; (8000a48 <HAL_InitTick+0xd4>)
 800098a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098c:	4a2e      	ldr	r2, [pc, #184]	; (8000a48 <HAL_InitTick+0xd4>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	6453      	str	r3, [r2, #68]	; 0x44
 8000994:	4b2c      	ldr	r3, [pc, #176]	; (8000a48 <HAL_InitTick+0xd4>)
 8000996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009a0:	f107 020c 	add.w	r2, r7, #12
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	4611      	mov	r1, r2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 f8d8 	bl	8001b60 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80009b0:	f001 f8c2 	bl	8001b38 <HAL_RCC_GetPCLK2Freq>
 80009b4:	4603      	mov	r3, r0
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009bc:	4a23      	ldr	r2, [pc, #140]	; (8000a4c <HAL_InitTick+0xd8>)
 80009be:	fba2 2303 	umull	r2, r3, r2, r3
 80009c2:	0c9b      	lsrs	r3, r3, #18
 80009c4:	3b01      	subs	r3, #1
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009c8:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <HAL_InitTick+0xdc>)
 80009ca:	4a22      	ldr	r2, [pc, #136]	; (8000a54 <HAL_InitTick+0xe0>)
 80009cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009ce:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <HAL_InitTick+0xdc>)
 80009d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009d4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009d6:	4a1e      	ldr	r2, [pc, #120]	; (8000a50 <HAL_InitTick+0xdc>)
 80009d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009da:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009dc:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <HAL_InitTick+0xdc>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e2:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <HAL_InitTick+0xdc>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e8:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <HAL_InitTick+0xdc>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009ee:	4818      	ldr	r0, [pc, #96]	; (8000a50 <HAL_InitTick+0xdc>)
 80009f0:	f001 f8e8 	bl	8001bc4 <HAL_TIM_Base_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80009fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d11b      	bne.n	8000a3a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a02:	4813      	ldr	r0, [pc, #76]	; (8000a50 <HAL_InitTick+0xdc>)
 8000a04:	f001 f938 	bl	8001c78 <HAL_TIM_Base_Start_IT>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d111      	bne.n	8000a3a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a16:	2019      	movs	r0, #25
 8000a18:	f000 fa36 	bl	8000e88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b0f      	cmp	r3, #15
 8000a20:	d808      	bhi.n	8000a34 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a22:	2200      	movs	r2, #0
 8000a24:	6879      	ldr	r1, [r7, #4]
 8000a26:	2019      	movs	r0, #25
 8000a28:	f000 fa12 	bl	8000e50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <HAL_InitTick+0xe4>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6013      	str	r3, [r2, #0]
 8000a32:	e002      	b.n	8000a3a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000a34:	2301      	movs	r3, #1
 8000a36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3730      	adds	r7, #48	; 0x30
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	431bde83 	.word	0x431bde83
 8000a50:	200000d0 	.word	0x200000d0
 8000a54:	40010000 	.word	0x40010000
 8000a58:	20000004 	.word	0x20000004

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <NMI_Handler+0x4>

08000a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <MemManage_Handler+0x4>

08000a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <BusFault_Handler+0x4>

08000a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <UsageFault_Handler+0x4>

08000a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a8e:	f001 f963 	bl	8001d58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000d0 	.word	0x200000d0

08000a9c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	e00a      	b.n	8000ac4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aae:	f3af 8000 	nop.w
 8000ab2:	4601      	mov	r1, r0
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	60ba      	str	r2, [r7, #8]
 8000aba:	b2ca      	uxtb	r2, r1
 8000abc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697a      	ldr	r2, [r7, #20]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	dbf0      	blt.n	8000aae <_read+0x12>
  }

  return len;
 8000acc:	687b      	ldr	r3, [r7, #4]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b086      	sub	sp, #24
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	60f8      	str	r0, [r7, #12]
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	e009      	b.n	8000afc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	60ba      	str	r2, [r7, #8]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fd4f 	bl	8000594 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	3301      	adds	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	dbf1      	blt.n	8000ae8 <_write+0x12>
  }
  return len;
 8000b04:	687b      	ldr	r3, [r7, #4]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <_close>:

int _close(int file)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b36:	605a      	str	r2, [r3, #4]
  return 0;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <_isatty>:

int _isatty(int file)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b4e:	2301      	movs	r3, #1
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b80:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <_sbrk+0x5c>)
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <_sbrk+0x60>)
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <_sbrk+0x64>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <_sbrk+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d207      	bcs.n	8000bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba8:	f002 f8a0 	bl	8002cec <__errno>
 8000bac:	4603      	mov	r3, r0
 8000bae:	220c      	movs	r2, #12
 8000bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	e009      	b.n	8000bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <_sbrk+0x64>)
 8000bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20030000 	.word	0x20030000
 8000bd8:	00000400 	.word	0x00000400
 8000bdc:	20000118 	.word	0x20000118
 8000be0:	200005c0 	.word	0x200005c0

08000be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <SystemInit+0x20>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <SystemInit+0x20>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c40 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c0e:	490e      	ldr	r1, [pc, #56]	; (8000c48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c10:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c24:	4c0b      	ldr	r4, [pc, #44]	; (8000c54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c32:	f7ff ffd7 	bl	8000be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c36:	f002 f85f 	bl	8002cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c3a:	f7ff fcbd 	bl	80005b8 <main>
  bx  lr    
 8000c3e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c40:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c4c:	08003d64 	.word	0x08003d64
  ldr r2, =_sbss
 8000c50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c54:	200005bc 	.word	0x200005bc

08000c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC_IRQHandler>
	...

08000c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <HAL_Init+0x40>)
 8000c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <HAL_Init+0x40>)
 8000c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <HAL_Init+0x40>)
 8000c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f8d8 	bl	8000e3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8a:	200f      	movs	r0, #15
 8000c8c:	f7ff fe72 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c90:	f7ff fdfc 	bl	800088c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023c00 	.word	0x40023c00

08000ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x20>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	2000011c 	.word	0x2000011c

08000cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_GetTick+0x14>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	2000011c 	.word	0x2000011c

08000ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <__NVIC_SetPriorityGrouping+0x44>)
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	60d3      	str	r3, [r2, #12]
}
 8000d18:	bf00      	nop
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <__NVIC_GetPriorityGrouping+0x18>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	0a1b      	lsrs	r3, r3, #8
 8000d32:	f003 0307 	and.w	r3, r3, #7
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	db0b      	blt.n	8000d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	f003 021f 	and.w	r2, r3, #31
 8000d5c:	4907      	ldr	r1, [pc, #28]	; (8000d7c <__NVIC_EnableIRQ+0x38>)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	095b      	lsrs	r3, r3, #5
 8000d64:	2001      	movs	r0, #1
 8000d66:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000e100 	.word	0xe000e100

08000d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	db0a      	blt.n	8000daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	490c      	ldr	r1, [pc, #48]	; (8000dcc <__NVIC_SetPriority+0x4c>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	0112      	lsls	r2, r2, #4
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	440b      	add	r3, r1
 8000da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da8:	e00a      	b.n	8000dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4908      	ldr	r1, [pc, #32]	; (8000dd0 <__NVIC_SetPriority+0x50>)
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	3b04      	subs	r3, #4
 8000db8:	0112      	lsls	r2, r2, #4
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	761a      	strb	r2, [r3, #24]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000e100 	.word	0xe000e100
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f1c3 0307 	rsb	r3, r3, #7
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	bf28      	it	cs
 8000df2:	2304      	movcs	r3, #4
 8000df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	2b06      	cmp	r3, #6
 8000dfc:	d902      	bls.n	8000e04 <NVIC_EncodePriority+0x30>
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3b03      	subs	r3, #3
 8000e02:	e000      	b.n	8000e06 <NVIC_EncodePriority+0x32>
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	f04f 32ff 	mov.w	r2, #4294967295
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43da      	mvns	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	401a      	ands	r2, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	43d9      	mvns	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	4313      	orrs	r3, r2
         );
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3724      	adds	r7, #36	; 0x24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ff4c 	bl	8000ce0 <__NVIC_SetPriorityGrouping>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e62:	f7ff ff61 	bl	8000d28 <__NVIC_GetPriorityGrouping>
 8000e66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	68b9      	ldr	r1, [r7, #8]
 8000e6c:	6978      	ldr	r0, [r7, #20]
 8000e6e:	f7ff ffb1 	bl	8000dd4 <NVIC_EncodePriority>
 8000e72:	4602      	mov	r2, r0
 8000e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff ff80 	bl	8000d80 <__NVIC_SetPriority>
}
 8000e80:	bf00      	nop
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ff54 	bl	8000d44 <__NVIC_EnableIRQ>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	; 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
 8000ebe:	e177      	b.n	80011b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	f040 8166 	bne.w	80011aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d005      	beq.n	8000ef6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d130      	bne.n	8000f58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	2203      	movs	r2, #3
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	68da      	ldr	r2, [r3, #12]
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	091b      	lsrs	r3, r3, #4
 8000f42:	f003 0201 	and.w	r2, r3, #1
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	2b03      	cmp	r3, #3
 8000f62:	d017      	beq.n	8000f94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d123      	bne.n	8000fe8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	08da      	lsrs	r2, r3, #3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3208      	adds	r2, #8
 8000fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	220f      	movs	r2, #15
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	691a      	ldr	r2, [r3, #16]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	08da      	lsrs	r2, r3, #3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3208      	adds	r2, #8
 8000fe2:	69b9      	ldr	r1, [r7, #24]
 8000fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0203 	and.w	r2, r3, #3
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 80c0 	beq.w	80011aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b66      	ldr	r3, [pc, #408]	; (80011c8 <HAL_GPIO_Init+0x324>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	4a65      	ldr	r2, [pc, #404]	; (80011c8 <HAL_GPIO_Init+0x324>)
 8001034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001038:	6453      	str	r3, [r2, #68]	; 0x44
 800103a:	4b63      	ldr	r3, [pc, #396]	; (80011c8 <HAL_GPIO_Init+0x324>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001046:	4a61      	ldr	r2, [pc, #388]	; (80011cc <HAL_GPIO_Init+0x328>)
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	089b      	lsrs	r3, r3, #2
 800104c:	3302      	adds	r3, #2
 800104e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	220f      	movs	r2, #15
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a58      	ldr	r2, [pc, #352]	; (80011d0 <HAL_GPIO_Init+0x32c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d037      	beq.n	80010e2 <HAL_GPIO_Init+0x23e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a57      	ldr	r2, [pc, #348]	; (80011d4 <HAL_GPIO_Init+0x330>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d031      	beq.n	80010de <HAL_GPIO_Init+0x23a>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a56      	ldr	r2, [pc, #344]	; (80011d8 <HAL_GPIO_Init+0x334>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d02b      	beq.n	80010da <HAL_GPIO_Init+0x236>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a55      	ldr	r2, [pc, #340]	; (80011dc <HAL_GPIO_Init+0x338>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d025      	beq.n	80010d6 <HAL_GPIO_Init+0x232>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a54      	ldr	r2, [pc, #336]	; (80011e0 <HAL_GPIO_Init+0x33c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d01f      	beq.n	80010d2 <HAL_GPIO_Init+0x22e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a53      	ldr	r2, [pc, #332]	; (80011e4 <HAL_GPIO_Init+0x340>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d019      	beq.n	80010ce <HAL_GPIO_Init+0x22a>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a52      	ldr	r2, [pc, #328]	; (80011e8 <HAL_GPIO_Init+0x344>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d013      	beq.n	80010ca <HAL_GPIO_Init+0x226>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a51      	ldr	r2, [pc, #324]	; (80011ec <HAL_GPIO_Init+0x348>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d00d      	beq.n	80010c6 <HAL_GPIO_Init+0x222>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a50      	ldr	r2, [pc, #320]	; (80011f0 <HAL_GPIO_Init+0x34c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d007      	beq.n	80010c2 <HAL_GPIO_Init+0x21e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4f      	ldr	r2, [pc, #316]	; (80011f4 <HAL_GPIO_Init+0x350>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d101      	bne.n	80010be <HAL_GPIO_Init+0x21a>
 80010ba:	2309      	movs	r3, #9
 80010bc:	e012      	b.n	80010e4 <HAL_GPIO_Init+0x240>
 80010be:	230a      	movs	r3, #10
 80010c0:	e010      	b.n	80010e4 <HAL_GPIO_Init+0x240>
 80010c2:	2308      	movs	r3, #8
 80010c4:	e00e      	b.n	80010e4 <HAL_GPIO_Init+0x240>
 80010c6:	2307      	movs	r3, #7
 80010c8:	e00c      	b.n	80010e4 <HAL_GPIO_Init+0x240>
 80010ca:	2306      	movs	r3, #6
 80010cc:	e00a      	b.n	80010e4 <HAL_GPIO_Init+0x240>
 80010ce:	2305      	movs	r3, #5
 80010d0:	e008      	b.n	80010e4 <HAL_GPIO_Init+0x240>
 80010d2:	2304      	movs	r3, #4
 80010d4:	e006      	b.n	80010e4 <HAL_GPIO_Init+0x240>
 80010d6:	2303      	movs	r3, #3
 80010d8:	e004      	b.n	80010e4 <HAL_GPIO_Init+0x240>
 80010da:	2302      	movs	r3, #2
 80010dc:	e002      	b.n	80010e4 <HAL_GPIO_Init+0x240>
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <HAL_GPIO_Init+0x240>
 80010e2:	2300      	movs	r3, #0
 80010e4:	69fa      	ldr	r2, [r7, #28]
 80010e6:	f002 0203 	and.w	r2, r2, #3
 80010ea:	0092      	lsls	r2, r2, #2
 80010ec:	4093      	lsls	r3, r2
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f4:	4935      	ldr	r1, [pc, #212]	; (80011cc <HAL_GPIO_Init+0x328>)
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	3302      	adds	r3, #2
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001102:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <HAL_GPIO_Init+0x354>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001126:	4a34      	ldr	r2, [pc, #208]	; (80011f8 <HAL_GPIO_Init+0x354>)
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800112c:	4b32      	ldr	r3, [pc, #200]	; (80011f8 <HAL_GPIO_Init+0x354>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001150:	4a29      	ldr	r2, [pc, #164]	; (80011f8 <HAL_GPIO_Init+0x354>)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001156:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <HAL_GPIO_Init+0x354>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800117a:	4a1f      	ldr	r2, [pc, #124]	; (80011f8 <HAL_GPIO_Init+0x354>)
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <HAL_GPIO_Init+0x354>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011a4:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <HAL_GPIO_Init+0x354>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3301      	adds	r3, #1
 80011ae:	61fb      	str	r3, [r7, #28]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	2b0f      	cmp	r3, #15
 80011b4:	f67f ae84 	bls.w	8000ec0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3724      	adds	r7, #36	; 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40013800 	.word	0x40013800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40020800 	.word	0x40020800
 80011dc:	40020c00 	.word	0x40020c00
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40021400 	.word	0x40021400
 80011e8:	40021800 	.word	0x40021800
 80011ec:	40021c00 	.word	0x40021c00
 80011f0:	40022000 	.word	0x40022000
 80011f4:	40022400 	.word	0x40022400
 80011f8:	40013c00 	.word	0x40013c00

080011fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
 8001208:	4613      	mov	r3, r2
 800120a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800120c:	787b      	ldrb	r3, [r7, #1]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001212:	887a      	ldrh	r2, [r7, #2]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001218:	e003      	b.n	8001222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800121a:	887b      	ldrh	r3, [r7, #2]
 800121c:	041a      	lsls	r2, r3, #16
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	619a      	str	r2, [r3, #24]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e267      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d075      	beq.n	800133a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800124e:	4b88      	ldr	r3, [pc, #544]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 030c 	and.w	r3, r3, #12
 8001256:	2b04      	cmp	r3, #4
 8001258:	d00c      	beq.n	8001274 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125a:	4b85      	ldr	r3, [pc, #532]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001262:	2b08      	cmp	r3, #8
 8001264:	d112      	bne.n	800128c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001266:	4b82      	ldr	r3, [pc, #520]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001272:	d10b      	bne.n	800128c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	4b7e      	ldr	r3, [pc, #504]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d05b      	beq.n	8001338 <HAL_RCC_OscConfig+0x108>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d157      	bne.n	8001338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e242      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001294:	d106      	bne.n	80012a4 <HAL_RCC_OscConfig+0x74>
 8001296:	4b76      	ldr	r3, [pc, #472]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a75      	ldr	r2, [pc, #468]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e01d      	b.n	80012e0 <HAL_RCC_OscConfig+0xb0>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012ac:	d10c      	bne.n	80012c8 <HAL_RCC_OscConfig+0x98>
 80012ae:	4b70      	ldr	r3, [pc, #448]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a6f      	ldr	r2, [pc, #444]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	4b6d      	ldr	r3, [pc, #436]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a6c      	ldr	r2, [pc, #432]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e00b      	b.n	80012e0 <HAL_RCC_OscConfig+0xb0>
 80012c8:	4b69      	ldr	r3, [pc, #420]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a68      	ldr	r2, [pc, #416]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b66      	ldr	r3, [pc, #408]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a65      	ldr	r2, [pc, #404]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80012da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d013      	beq.n	8001310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fcee 	bl	8000cc8 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fcea 	bl	8000cc8 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e207      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	4b5b      	ldr	r3, [pc, #364]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0xc0>
 800130e:	e014      	b.n	800133a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fcda 	bl	8000cc8 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff fcd6 	bl	8000cc8 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e1f3      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132a:	4b51      	ldr	r3, [pc, #324]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0xe8>
 8001336:	e000      	b.n	800133a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d063      	beq.n	800140e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001346:	4b4a      	ldr	r3, [pc, #296]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00b      	beq.n	800136a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001352:	4b47      	ldr	r3, [pc, #284]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135a:	2b08      	cmp	r3, #8
 800135c:	d11c      	bne.n	8001398 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135e:	4b44      	ldr	r3, [pc, #272]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d116      	bne.n	8001398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136a:	4b41      	ldr	r3, [pc, #260]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d005      	beq.n	8001382 <HAL_RCC_OscConfig+0x152>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d001      	beq.n	8001382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e1c7      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001382:	4b3b      	ldr	r3, [pc, #236]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4937      	ldr	r1, [pc, #220]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001396:	e03a      	b.n	800140e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d020      	beq.n	80013e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a0:	4b34      	ldr	r3, [pc, #208]	; (8001474 <HAL_RCC_OscConfig+0x244>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a6:	f7ff fc8f 	bl	8000cc8 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ae:	f7ff fc8b 	bl	8000cc8 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e1a8      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c0:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013cc:	4b28      	ldr	r3, [pc, #160]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	4925      	ldr	r1, [pc, #148]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	600b      	str	r3, [r1, #0]
 80013e0:	e015      	b.n	800140e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <HAL_RCC_OscConfig+0x244>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e8:	f7ff fc6e 	bl	8000cc8 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f0:	f7ff fc6a 	bl	8000cc8 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e187      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	2b00      	cmp	r3, #0
 8001418:	d036      	beq.n	8001488 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d016      	beq.n	8001450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_RCC_OscConfig+0x248>)
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001428:	f7ff fc4e 	bl	8000cc8 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001430:	f7ff fc4a 	bl	8000cc8 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e167      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_RCC_OscConfig+0x240>)
 8001444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f0      	beq.n	8001430 <HAL_RCC_OscConfig+0x200>
 800144e:	e01b      	b.n	8001488 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_RCC_OscConfig+0x248>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001456:	f7ff fc37 	bl	8000cc8 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800145c:	e00e      	b.n	800147c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145e:	f7ff fc33 	bl	8000cc8 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d907      	bls.n	800147c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e150      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
 8001470:	40023800 	.word	0x40023800
 8001474:	42470000 	.word	0x42470000
 8001478:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147c:	4b88      	ldr	r3, [pc, #544]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800147e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1ea      	bne.n	800145e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 8097 	beq.w	80015c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149a:	4b81      	ldr	r3, [pc, #516]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10f      	bne.n	80014c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	4b7d      	ldr	r3, [pc, #500]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	4a7c      	ldr	r2, [pc, #496]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	; 0x40
 80014b6:	4b7a      	ldr	r3, [pc, #488]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c2:	2301      	movs	r3, #1
 80014c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c6:	4b77      	ldr	r3, [pc, #476]	; (80016a4 <HAL_RCC_OscConfig+0x474>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d118      	bne.n	8001504 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d2:	4b74      	ldr	r3, [pc, #464]	; (80016a4 <HAL_RCC_OscConfig+0x474>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a73      	ldr	r2, [pc, #460]	; (80016a4 <HAL_RCC_OscConfig+0x474>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014de:	f7ff fbf3 	bl	8000cc8 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e6:	f7ff fbef 	bl	8000cc8 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e10c      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f8:	4b6a      	ldr	r3, [pc, #424]	; (80016a4 <HAL_RCC_OscConfig+0x474>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d106      	bne.n	800151a <HAL_RCC_OscConfig+0x2ea>
 800150c:	4b64      	ldr	r3, [pc, #400]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	4a63      	ldr	r2, [pc, #396]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6713      	str	r3, [r2, #112]	; 0x70
 8001518:	e01c      	b.n	8001554 <HAL_RCC_OscConfig+0x324>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2b05      	cmp	r3, #5
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0x30c>
 8001522:	4b5f      	ldr	r3, [pc, #380]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001526:	4a5e      	ldr	r2, [pc, #376]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	6713      	str	r3, [r2, #112]	; 0x70
 800152e:	4b5c      	ldr	r3, [pc, #368]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001532:	4a5b      	ldr	r2, [pc, #364]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6713      	str	r3, [r2, #112]	; 0x70
 800153a:	e00b      	b.n	8001554 <HAL_RCC_OscConfig+0x324>
 800153c:	4b58      	ldr	r3, [pc, #352]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800153e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001540:	4a57      	ldr	r2, [pc, #348]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001542:	f023 0301 	bic.w	r3, r3, #1
 8001546:	6713      	str	r3, [r2, #112]	; 0x70
 8001548:	4b55      	ldr	r3, [pc, #340]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154c:	4a54      	ldr	r2, [pc, #336]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800154e:	f023 0304 	bic.w	r3, r3, #4
 8001552:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d015      	beq.n	8001588 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155c:	f7ff fbb4 	bl	8000cc8 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001562:	e00a      	b.n	800157a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001564:	f7ff fbb0 	bl	8000cc8 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001572:	4293      	cmp	r3, r2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e0cb      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157a:	4b49      	ldr	r3, [pc, #292]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0ee      	beq.n	8001564 <HAL_RCC_OscConfig+0x334>
 8001586:	e014      	b.n	80015b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001588:	f7ff fb9e 	bl	8000cc8 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158e:	e00a      	b.n	80015a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001590:	f7ff fb9a 	bl	8000cc8 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	f241 3288 	movw	r2, #5000	; 0x1388
 800159e:	4293      	cmp	r3, r2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e0b5      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a6:	4b3e      	ldr	r3, [pc, #248]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1ee      	bne.n	8001590 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d105      	bne.n	80015c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b8:	4b39      	ldr	r3, [pc, #228]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	4a38      	ldr	r2, [pc, #224]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80015be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 80a1 	beq.w	8001710 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ce:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d05c      	beq.n	8001694 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d141      	bne.n	8001666 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e2:	4b31      	ldr	r3, [pc, #196]	; (80016a8 <HAL_RCC_OscConfig+0x478>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fb6e 	bl	8000cc8 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f0:	f7ff fb6a 	bl	8000cc8 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e087      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001602:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69da      	ldr	r2, [r3, #28]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	019b      	lsls	r3, r3, #6
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001624:	085b      	lsrs	r3, r3, #1
 8001626:	3b01      	subs	r3, #1
 8001628:	041b      	lsls	r3, r3, #16
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001630:	061b      	lsls	r3, r3, #24
 8001632:	491b      	ldr	r1, [pc, #108]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <HAL_RCC_OscConfig+0x478>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff fb43 	bl	8000cc8 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001646:	f7ff fb3f 	bl	8000cc8 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e05c      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x416>
 8001664:	e054      	b.n	8001710 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_RCC_OscConfig+0x478>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fb2c 	bl	8000cc8 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff fb28 	bl	8000cc8 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e045      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_RCC_OscConfig+0x470>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x444>
 8001692:	e03d      	b.n	8001710 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d107      	bne.n	80016ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e038      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40007000 	.word	0x40007000
 80016a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_RCC_OscConfig+0x4ec>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d028      	beq.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d121      	bne.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d11a      	bne.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016dc:	4013      	ands	r3, r2
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d111      	bne.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f2:	085b      	lsrs	r3, r3, #1
 80016f4:	3b01      	subs	r3, #1
 80016f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d107      	bne.n	800170c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800

08001720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0cc      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001734:	4b68      	ldr	r3, [pc, #416]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 030f 	and.w	r3, r3, #15
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d90c      	bls.n	800175c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	4b65      	ldr	r3, [pc, #404]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b63      	ldr	r3, [pc, #396]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0b8      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d020      	beq.n	80017aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001774:	4b59      	ldr	r3, [pc, #356]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	4a58      	ldr	r2, [pc, #352]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800177e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800178c:	4b53      	ldr	r3, [pc, #332]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4a52      	ldr	r2, [pc, #328]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001798:	4b50      	ldr	r3, [pc, #320]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	494d      	ldr	r1, [pc, #308]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d044      	beq.n	8001840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	4b47      	ldr	r3, [pc, #284]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d119      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e07f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d003      	beq.n	80017de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017de:	4b3f      	ldr	r3, [pc, #252]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d109      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e06f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ee:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e067      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017fe:	4b37      	ldr	r3, [pc, #220]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f023 0203 	bic.w	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4934      	ldr	r1, [pc, #208]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	4313      	orrs	r3, r2
 800180e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001810:	f7ff fa5a 	bl	8000cc8 <HAL_GetTick>
 8001814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001816:	e00a      	b.n	800182e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001818:	f7ff fa56 	bl	8000cc8 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	f241 3288 	movw	r2, #5000	; 0x1388
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e04f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182e:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 020c 	and.w	r2, r3, #12
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	429a      	cmp	r2, r3
 800183e:	d1eb      	bne.n	8001818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001840:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 030f 	and.w	r3, r3, #15
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d20c      	bcs.n	8001868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e032      	b.n	80018ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d008      	beq.n	8001886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	4916      	ldr	r1, [pc, #88]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	4313      	orrs	r3, r2
 8001884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d009      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	490e      	ldr	r1, [pc, #56]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018a6:	f000 f821 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 80018aa:	4602      	mov	r2, r0
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	490a      	ldr	r1, [pc, #40]	; (80018e0 <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	5ccb      	ldrb	r3, [r1, r3]
 80018ba:	fa22 f303 	lsr.w	r3, r2, r3
 80018be:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_RCC_ClockConfig+0x1c8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff f854 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023c00 	.word	0x40023c00
 80018dc:	40023800 	.word	0x40023800
 80018e0:	08003ca4 	.word	0x08003ca4
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000004 	.word	0x20000004

080018ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f0:	b094      	sub	sp, #80	; 0x50
 80018f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	647b      	str	r3, [r7, #68]	; 0x44
 80018f8:	2300      	movs	r3, #0
 80018fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018fc:	2300      	movs	r3, #0
 80018fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001904:	4b79      	ldr	r3, [pc, #484]	; (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	2b08      	cmp	r3, #8
 800190e:	d00d      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x40>
 8001910:	2b08      	cmp	r3, #8
 8001912:	f200 80e1 	bhi.w	8001ad8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0x34>
 800191a:	2b04      	cmp	r3, #4
 800191c:	d003      	beq.n	8001926 <HAL_RCC_GetSysClockFreq+0x3a>
 800191e:	e0db      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001920:	4b73      	ldr	r3, [pc, #460]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001922:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001924:	e0db      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001926:	4b73      	ldr	r3, [pc, #460]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001928:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800192a:	e0d8      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800192c:	4b6f      	ldr	r3, [pc, #444]	; (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001934:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001936:	4b6d      	ldr	r3, [pc, #436]	; (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d063      	beq.n	8001a0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001942:	4b6a      	ldr	r3, [pc, #424]	; (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	099b      	lsrs	r3, r3, #6
 8001948:	2200      	movs	r2, #0
 800194a:	63bb      	str	r3, [r7, #56]	; 0x38
 800194c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800194e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
 8001956:	2300      	movs	r3, #0
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
 800195a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800195e:	4622      	mov	r2, r4
 8001960:	462b      	mov	r3, r5
 8001962:	f04f 0000 	mov.w	r0, #0
 8001966:	f04f 0100 	mov.w	r1, #0
 800196a:	0159      	lsls	r1, r3, #5
 800196c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001970:	0150      	lsls	r0, r2, #5
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4621      	mov	r1, r4
 8001978:	1a51      	subs	r1, r2, r1
 800197a:	6139      	str	r1, [r7, #16]
 800197c:	4629      	mov	r1, r5
 800197e:	eb63 0301 	sbc.w	r3, r3, r1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001990:	4659      	mov	r1, fp
 8001992:	018b      	lsls	r3, r1, #6
 8001994:	4651      	mov	r1, sl
 8001996:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800199a:	4651      	mov	r1, sl
 800199c:	018a      	lsls	r2, r1, #6
 800199e:	4651      	mov	r1, sl
 80019a0:	ebb2 0801 	subs.w	r8, r2, r1
 80019a4:	4659      	mov	r1, fp
 80019a6:	eb63 0901 	sbc.w	r9, r3, r1
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019be:	4690      	mov	r8, r2
 80019c0:	4699      	mov	r9, r3
 80019c2:	4623      	mov	r3, r4
 80019c4:	eb18 0303 	adds.w	r3, r8, r3
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	462b      	mov	r3, r5
 80019cc:	eb49 0303 	adc.w	r3, r9, r3
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019de:	4629      	mov	r1, r5
 80019e0:	024b      	lsls	r3, r1, #9
 80019e2:	4621      	mov	r1, r4
 80019e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019e8:	4621      	mov	r1, r4
 80019ea:	024a      	lsls	r2, r1, #9
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f2:	2200      	movs	r2, #0
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019fc:	f7fe fc48 	bl	8000290 <__aeabi_uldivmod>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4613      	mov	r3, r2
 8001a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a08:	e058      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0a:	4b38      	ldr	r3, [pc, #224]	; (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	099b      	lsrs	r3, r3, #6
 8001a10:	2200      	movs	r2, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	4611      	mov	r1, r2
 8001a16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a1a:	623b      	str	r3, [r7, #32]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a24:	4642      	mov	r2, r8
 8001a26:	464b      	mov	r3, r9
 8001a28:	f04f 0000 	mov.w	r0, #0
 8001a2c:	f04f 0100 	mov.w	r1, #0
 8001a30:	0159      	lsls	r1, r3, #5
 8001a32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a36:	0150      	lsls	r0, r2, #5
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4641      	mov	r1, r8
 8001a3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a42:	4649      	mov	r1, r9
 8001a44:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a5c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a60:	eb63 050b 	sbc.w	r5, r3, fp
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	00eb      	lsls	r3, r5, #3
 8001a6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a72:	00e2      	lsls	r2, r4, #3
 8001a74:	4614      	mov	r4, r2
 8001a76:	461d      	mov	r5, r3
 8001a78:	4643      	mov	r3, r8
 8001a7a:	18e3      	adds	r3, r4, r3
 8001a7c:	603b      	str	r3, [r7, #0]
 8001a7e:	464b      	mov	r3, r9
 8001a80:	eb45 0303 	adc.w	r3, r5, r3
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a92:	4629      	mov	r1, r5
 8001a94:	028b      	lsls	r3, r1, #10
 8001a96:	4621      	mov	r1, r4
 8001a98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	028a      	lsls	r2, r1, #10
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	61fa      	str	r2, [r7, #28]
 8001aac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ab0:	f7fe fbee 	bl	8000290 <__aeabi_uldivmod>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4613      	mov	r3, r2
 8001aba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_RCC_GetSysClockFreq+0x200>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	0c1b      	lsrs	r3, r3, #16
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001acc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ad6:	e002      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ada:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3750      	adds	r7, #80	; 0x50
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	00f42400 	.word	0x00f42400
 8001af4:	007a1200 	.word	0x007a1200

08001af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001afe:	681b      	ldr	r3, [r3, #0]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000000 	.word	0x20000000

08001b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b14:	f7ff fff0 	bl	8001af8 <HAL_RCC_GetHCLKFreq>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	0a9b      	lsrs	r3, r3, #10
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	4903      	ldr	r1, [pc, #12]	; (8001b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b26:	5ccb      	ldrb	r3, [r1, r3]
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40023800 	.word	0x40023800
 8001b34:	08003cb4 	.word	0x08003cb4

08001b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b3c:	f7ff ffdc 	bl	8001af8 <HAL_RCC_GetHCLKFreq>
 8001b40:	4602      	mov	r2, r0
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	0b5b      	lsrs	r3, r3, #13
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	4903      	ldr	r1, [pc, #12]	; (8001b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b4e:	5ccb      	ldrb	r3, [r1, r3]
 8001b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	08003cb4 	.word	0x08003cb4

08001b60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_RCC_GetClockConfig+0x5c>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 0203 	and.w	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <HAL_RCC_GetClockConfig+0x5c>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <HAL_RCC_GetClockConfig+0x5c>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_RCC_GetClockConfig+0x5c>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	08db      	lsrs	r3, r3, #3
 8001b9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ba2:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <HAL_RCC_GetClockConfig+0x60>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 020f 	and.w	r2, r3, #15
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	601a      	str	r2, [r3, #0]
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40023c00 	.word	0x40023c00

08001bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e041      	b.n	8001c5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d106      	bne.n	8001bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f839 	bl	8001c62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3304      	adds	r3, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	4610      	mov	r0, r2
 8001c04:	f000 f9d8 	bl	8001fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d001      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e04e      	b.n	8001d2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2202      	movs	r2, #2
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0201 	orr.w	r2, r2, #1
 8001ca6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a23      	ldr	r2, [pc, #140]	; (8001d3c <HAL_TIM_Base_Start_IT+0xc4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d022      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0x80>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cba:	d01d      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0x80>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a1f      	ldr	r2, [pc, #124]	; (8001d40 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d018      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0x80>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a1e      	ldr	r2, [pc, #120]	; (8001d44 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d013      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0x80>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a1c      	ldr	r2, [pc, #112]	; (8001d48 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00e      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0x80>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a1b      	ldr	r2, [pc, #108]	; (8001d4c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d009      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0x80>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a19      	ldr	r2, [pc, #100]	; (8001d50 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d004      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0x80>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a18      	ldr	r2, [pc, #96]	; (8001d54 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d111      	bne.n	8001d1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d010      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0201 	orr.w	r2, r2, #1
 8001d18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d1a:	e007      	b.n	8001d2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0201 	orr.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40010000 	.word	0x40010000
 8001d40:	40000400 	.word	0x40000400
 8001d44:	40000800 	.word	0x40000800
 8001d48:	40000c00 	.word	0x40000c00
 8001d4c:	40010400 	.word	0x40010400
 8001d50:	40014000 	.word	0x40014000
 8001d54:	40001800 	.word	0x40001800

08001d58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d122      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d11b      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f06f 0202 	mvn.w	r2, #2
 8001d84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f8ee 	bl	8001f7c <HAL_TIM_IC_CaptureCallback>
 8001da0:	e005      	b.n	8001dae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f8e0 	bl	8001f68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f8f1 	bl	8001f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d122      	bne.n	8001e08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d11b      	bne.n	8001e08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0204 	mvn.w	r2, #4
 8001dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f8c4 	bl	8001f7c <HAL_TIM_IC_CaptureCallback>
 8001df4:	e005      	b.n	8001e02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f8b6 	bl	8001f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f8c7 	bl	8001f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d122      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d11b      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0208 	mvn.w	r2, #8
 8001e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2204      	movs	r2, #4
 8001e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f89a 	bl	8001f7c <HAL_TIM_IC_CaptureCallback>
 8001e48:	e005      	b.n	8001e56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f88c 	bl	8001f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f89d 	bl	8001f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	2b10      	cmp	r3, #16
 8001e68:	d122      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f003 0310 	and.w	r3, r3, #16
 8001e74:	2b10      	cmp	r3, #16
 8001e76:	d11b      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0210 	mvn.w	r2, #16
 8001e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2208      	movs	r2, #8
 8001e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f870 	bl	8001f7c <HAL_TIM_IC_CaptureCallback>
 8001e9c:	e005      	b.n	8001eaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f862 	bl	8001f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f873 	bl	8001f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d10e      	bne.n	8001edc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d107      	bne.n	8001edc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0201 	mvn.w	r2, #1
 8001ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7fe fcc0 	bl	800085c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee6:	2b80      	cmp	r3, #128	; 0x80
 8001ee8:	d10e      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef4:	2b80      	cmp	r3, #128	; 0x80
 8001ef6:	d107      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f902 	bl	800210c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f12:	2b40      	cmp	r3, #64	; 0x40
 8001f14:	d10e      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f20:	2b40      	cmp	r3, #64	; 0x40
 8001f22:	d107      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f838 	bl	8001fa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f003 0320 	and.w	r3, r3, #32
 8001f3e:	2b20      	cmp	r3, #32
 8001f40:	d10e      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 0320 	and.w	r3, r3, #32
 8001f4c:	2b20      	cmp	r3, #32
 8001f4e:	d107      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0220 	mvn.w	r2, #32
 8001f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f8cc 	bl	80020f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a40      	ldr	r2, [pc, #256]	; (80020cc <TIM_Base_SetConfig+0x114>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d013      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd6:	d00f      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3d      	ldr	r2, [pc, #244]	; (80020d0 <TIM_Base_SetConfig+0x118>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00b      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3c      	ldr	r2, [pc, #240]	; (80020d4 <TIM_Base_SetConfig+0x11c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d007      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3b      	ldr	r2, [pc, #236]	; (80020d8 <TIM_Base_SetConfig+0x120>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d003      	beq.n	8001ff8 <TIM_Base_SetConfig+0x40>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a3a      	ldr	r2, [pc, #232]	; (80020dc <TIM_Base_SetConfig+0x124>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d108      	bne.n	800200a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a2f      	ldr	r2, [pc, #188]	; (80020cc <TIM_Base_SetConfig+0x114>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d02b      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002018:	d027      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a2c      	ldr	r2, [pc, #176]	; (80020d0 <TIM_Base_SetConfig+0x118>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d023      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a2b      	ldr	r2, [pc, #172]	; (80020d4 <TIM_Base_SetConfig+0x11c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01f      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a2a      	ldr	r2, [pc, #168]	; (80020d8 <TIM_Base_SetConfig+0x120>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d01b      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a29      	ldr	r2, [pc, #164]	; (80020dc <TIM_Base_SetConfig+0x124>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d017      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a28      	ldr	r2, [pc, #160]	; (80020e0 <TIM_Base_SetConfig+0x128>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d013      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a27      	ldr	r2, [pc, #156]	; (80020e4 <TIM_Base_SetConfig+0x12c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00f      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a26      	ldr	r2, [pc, #152]	; (80020e8 <TIM_Base_SetConfig+0x130>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00b      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a25      	ldr	r2, [pc, #148]	; (80020ec <TIM_Base_SetConfig+0x134>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d007      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a24      	ldr	r2, [pc, #144]	; (80020f0 <TIM_Base_SetConfig+0x138>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d003      	beq.n	800206a <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a23      	ldr	r2, [pc, #140]	; (80020f4 <TIM_Base_SetConfig+0x13c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d108      	bne.n	800207c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4313      	orrs	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <TIM_Base_SetConfig+0x114>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d003      	beq.n	80020b0 <TIM_Base_SetConfig+0xf8>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a0c      	ldr	r2, [pc, #48]	; (80020dc <TIM_Base_SetConfig+0x124>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d103      	bne.n	80020b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	615a      	str	r2, [r3, #20]
}
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40010000 	.word	0x40010000
 80020d0:	40000400 	.word	0x40000400
 80020d4:	40000800 	.word	0x40000800
 80020d8:	40000c00 	.word	0x40000c00
 80020dc:	40010400 	.word	0x40010400
 80020e0:	40014000 	.word	0x40014000
 80020e4:	40014400 	.word	0x40014400
 80020e8:	40014800 	.word	0x40014800
 80020ec:	40001800 	.word	0x40001800
 80020f0:	40001c00 	.word	0x40001c00
 80020f4:	40002000 	.word	0x40002000

080020f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e03f      	b.n	80021b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d106      	bne.n	800214c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7fe fbcc 	bl	80008e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2224      	movs	r2, #36	; 0x24
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002162:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f929 	bl	80023bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002178:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	695a      	ldr	r2, [r3, #20]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002188:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002198:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2220      	movs	r2, #32
 80021ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b08a      	sub	sp, #40	; 0x28
 80021be:	af02      	add	r7, sp, #8
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	603b      	str	r3, [r7, #0]
 80021c6:	4613      	mov	r3, r2
 80021c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b20      	cmp	r3, #32
 80021d8:	d17c      	bne.n	80022d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <HAL_UART_Transmit+0x2c>
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e075      	b.n	80022d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_UART_Transmit+0x3e>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e06e      	b.n	80022d6 <HAL_UART_Transmit+0x11c>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2221      	movs	r2, #33	; 0x21
 800220a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800220e:	f7fe fd5b 	bl	8000cc8 <HAL_GetTick>
 8002212:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	88fa      	ldrh	r2, [r7, #6]
 8002218:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	88fa      	ldrh	r2, [r7, #6]
 800221e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002228:	d108      	bne.n	800223c <HAL_UART_Transmit+0x82>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d104      	bne.n	800223c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	61bb      	str	r3, [r7, #24]
 800223a:	e003      	b.n	8002244 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002240:	2300      	movs	r3, #0
 8002242:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800224c:	e02a      	b.n	80022a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2200      	movs	r2, #0
 8002256:	2180      	movs	r1, #128	; 0x80
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 f840 	bl	80022de <UART_WaitOnFlagUntilTimeout>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e036      	b.n	80022d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10b      	bne.n	8002286 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800227c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	3302      	adds	r3, #2
 8002282:	61bb      	str	r3, [r7, #24]
 8002284:	e007      	b.n	8002296 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	781a      	ldrb	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	3301      	adds	r3, #1
 8002294:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800229a:	b29b      	uxth	r3, r3
 800229c:	3b01      	subs	r3, #1
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1cf      	bne.n	800224e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2200      	movs	r2, #0
 80022b6:	2140      	movs	r1, #64	; 0x40
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f810 	bl	80022de <UART_WaitOnFlagUntilTimeout>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e006      	b.n	80022d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	e000      	b.n	80022d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022d4:	2302      	movs	r3, #2
  }
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3720      	adds	r7, #32
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b090      	sub	sp, #64	; 0x40
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	603b      	str	r3, [r7, #0]
 80022ea:	4613      	mov	r3, r2
 80022ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022ee:	e050      	b.n	8002392 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f6:	d04c      	beq.n	8002392 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d007      	beq.n	800230e <UART_WaitOnFlagUntilTimeout+0x30>
 80022fe:	f7fe fce3 	bl	8000cc8 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800230a:	429a      	cmp	r2, r3
 800230c:	d241      	bcs.n	8002392 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	330c      	adds	r3, #12
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002318:	e853 3f00 	ldrex	r3, [r3]
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002324:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	330c      	adds	r3, #12
 800232c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800232e:	637a      	str	r2, [r7, #52]	; 0x34
 8002330:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002332:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002336:	e841 2300 	strex	r3, r2, [r1]
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800233c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1e5      	bne.n	800230e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	3314      	adds	r3, #20
 8002348:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	e853 3f00 	ldrex	r3, [r3]
 8002350:	613b      	str	r3, [r7, #16]
   return(result);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	63bb      	str	r3, [r7, #56]	; 0x38
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	3314      	adds	r3, #20
 8002360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002362:	623a      	str	r2, [r7, #32]
 8002364:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002366:	69f9      	ldr	r1, [r7, #28]
 8002368:	6a3a      	ldr	r2, [r7, #32]
 800236a:	e841 2300 	strex	r3, r2, [r1]
 800236e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1e5      	bne.n	8002342 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2220      	movs	r2, #32
 800237a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2220      	movs	r2, #32
 8002382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e00f      	b.n	80023b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4013      	ands	r3, r2
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	429a      	cmp	r2, r3
 80023a0:	bf0c      	ite	eq
 80023a2:	2301      	moveq	r3, #1
 80023a4:	2300      	movne	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d09f      	beq.n	80022f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3740      	adds	r7, #64	; 0x40
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023c0:	b0c0      	sub	sp, #256	; 0x100
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80023d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d8:	68d9      	ldr	r1, [r3, #12]
 80023da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	ea40 0301 	orr.w	r3, r0, r1
 80023e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	431a      	orrs	r2, r3
 80023fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	4313      	orrs	r3, r2
 8002404:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002414:	f021 010c 	bic.w	r1, r1, #12
 8002418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002422:	430b      	orrs	r3, r1
 8002424:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002436:	6999      	ldr	r1, [r3, #24]
 8002438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	ea40 0301 	orr.w	r3, r0, r1
 8002442:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	4b8f      	ldr	r3, [pc, #572]	; (8002688 <UART_SetConfig+0x2cc>)
 800244c:	429a      	cmp	r2, r3
 800244e:	d005      	beq.n	800245c <UART_SetConfig+0xa0>
 8002450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4b8d      	ldr	r3, [pc, #564]	; (800268c <UART_SetConfig+0x2d0>)
 8002458:	429a      	cmp	r2, r3
 800245a:	d104      	bne.n	8002466 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800245c:	f7ff fb6c 	bl	8001b38 <HAL_RCC_GetPCLK2Freq>
 8002460:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002464:	e003      	b.n	800246e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002466:	f7ff fb53 	bl	8001b10 <HAL_RCC_GetPCLK1Freq>
 800246a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800246e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002478:	f040 810c 	bne.w	8002694 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800247c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002480:	2200      	movs	r2, #0
 8002482:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002486:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800248a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800248e:	4622      	mov	r2, r4
 8002490:	462b      	mov	r3, r5
 8002492:	1891      	adds	r1, r2, r2
 8002494:	65b9      	str	r1, [r7, #88]	; 0x58
 8002496:	415b      	adcs	r3, r3
 8002498:	65fb      	str	r3, [r7, #92]	; 0x5c
 800249a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800249e:	4621      	mov	r1, r4
 80024a0:	eb12 0801 	adds.w	r8, r2, r1
 80024a4:	4629      	mov	r1, r5
 80024a6:	eb43 0901 	adc.w	r9, r3, r1
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024be:	4690      	mov	r8, r2
 80024c0:	4699      	mov	r9, r3
 80024c2:	4623      	mov	r3, r4
 80024c4:	eb18 0303 	adds.w	r3, r8, r3
 80024c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80024cc:	462b      	mov	r3, r5
 80024ce:	eb49 0303 	adc.w	r3, r9, r3
 80024d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80024d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80024e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80024e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80024ea:	460b      	mov	r3, r1
 80024ec:	18db      	adds	r3, r3, r3
 80024ee:	653b      	str	r3, [r7, #80]	; 0x50
 80024f0:	4613      	mov	r3, r2
 80024f2:	eb42 0303 	adc.w	r3, r2, r3
 80024f6:	657b      	str	r3, [r7, #84]	; 0x54
 80024f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80024fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002500:	f7fd fec6 	bl	8000290 <__aeabi_uldivmod>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4b61      	ldr	r3, [pc, #388]	; (8002690 <UART_SetConfig+0x2d4>)
 800250a:	fba3 2302 	umull	r2, r3, r3, r2
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	011c      	lsls	r4, r3, #4
 8002512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002516:	2200      	movs	r2, #0
 8002518:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800251c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002520:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002524:	4642      	mov	r2, r8
 8002526:	464b      	mov	r3, r9
 8002528:	1891      	adds	r1, r2, r2
 800252a:	64b9      	str	r1, [r7, #72]	; 0x48
 800252c:	415b      	adcs	r3, r3
 800252e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002530:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002534:	4641      	mov	r1, r8
 8002536:	eb12 0a01 	adds.w	sl, r2, r1
 800253a:	4649      	mov	r1, r9
 800253c:	eb43 0b01 	adc.w	fp, r3, r1
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800254c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002550:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002554:	4692      	mov	sl, r2
 8002556:	469b      	mov	fp, r3
 8002558:	4643      	mov	r3, r8
 800255a:	eb1a 0303 	adds.w	r3, sl, r3
 800255e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002562:	464b      	mov	r3, r9
 8002564:	eb4b 0303 	adc.w	r3, fp, r3
 8002568:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800256c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002578:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800257c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002580:	460b      	mov	r3, r1
 8002582:	18db      	adds	r3, r3, r3
 8002584:	643b      	str	r3, [r7, #64]	; 0x40
 8002586:	4613      	mov	r3, r2
 8002588:	eb42 0303 	adc.w	r3, r2, r3
 800258c:	647b      	str	r3, [r7, #68]	; 0x44
 800258e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002592:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002596:	f7fd fe7b 	bl	8000290 <__aeabi_uldivmod>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4611      	mov	r1, r2
 80025a0:	4b3b      	ldr	r3, [pc, #236]	; (8002690 <UART_SetConfig+0x2d4>)
 80025a2:	fba3 2301 	umull	r2, r3, r3, r1
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	2264      	movs	r2, #100	; 0x64
 80025aa:	fb02 f303 	mul.w	r3, r2, r3
 80025ae:	1acb      	subs	r3, r1, r3
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80025b6:	4b36      	ldr	r3, [pc, #216]	; (8002690 <UART_SetConfig+0x2d4>)
 80025b8:	fba3 2302 	umull	r2, r3, r3, r2
 80025bc:	095b      	lsrs	r3, r3, #5
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025c4:	441c      	add	r4, r3
 80025c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025ca:	2200      	movs	r2, #0
 80025cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80025d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80025d8:	4642      	mov	r2, r8
 80025da:	464b      	mov	r3, r9
 80025dc:	1891      	adds	r1, r2, r2
 80025de:	63b9      	str	r1, [r7, #56]	; 0x38
 80025e0:	415b      	adcs	r3, r3
 80025e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025e8:	4641      	mov	r1, r8
 80025ea:	1851      	adds	r1, r2, r1
 80025ec:	6339      	str	r1, [r7, #48]	; 0x30
 80025ee:	4649      	mov	r1, r9
 80025f0:	414b      	adcs	r3, r1
 80025f2:	637b      	str	r3, [r7, #52]	; 0x34
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002600:	4659      	mov	r1, fp
 8002602:	00cb      	lsls	r3, r1, #3
 8002604:	4651      	mov	r1, sl
 8002606:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800260a:	4651      	mov	r1, sl
 800260c:	00ca      	lsls	r2, r1, #3
 800260e:	4610      	mov	r0, r2
 8002610:	4619      	mov	r1, r3
 8002612:	4603      	mov	r3, r0
 8002614:	4642      	mov	r2, r8
 8002616:	189b      	adds	r3, r3, r2
 8002618:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800261c:	464b      	mov	r3, r9
 800261e:	460a      	mov	r2, r1
 8002620:	eb42 0303 	adc.w	r3, r2, r3
 8002624:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002634:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002638:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800263c:	460b      	mov	r3, r1
 800263e:	18db      	adds	r3, r3, r3
 8002640:	62bb      	str	r3, [r7, #40]	; 0x28
 8002642:	4613      	mov	r3, r2
 8002644:	eb42 0303 	adc.w	r3, r2, r3
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800264a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800264e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002652:	f7fd fe1d 	bl	8000290 <__aeabi_uldivmod>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <UART_SetConfig+0x2d4>)
 800265c:	fba3 1302 	umull	r1, r3, r3, r2
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	2164      	movs	r1, #100	; 0x64
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	3332      	adds	r3, #50	; 0x32
 800266e:	4a08      	ldr	r2, [pc, #32]	; (8002690 <UART_SetConfig+0x2d4>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	095b      	lsrs	r3, r3, #5
 8002676:	f003 0207 	and.w	r2, r3, #7
 800267a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4422      	add	r2, r4
 8002682:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002684:	e105      	b.n	8002892 <UART_SetConfig+0x4d6>
 8002686:	bf00      	nop
 8002688:	40011000 	.word	0x40011000
 800268c:	40011400 	.word	0x40011400
 8002690:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002698:	2200      	movs	r2, #0
 800269a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800269e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80026a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80026a6:	4642      	mov	r2, r8
 80026a8:	464b      	mov	r3, r9
 80026aa:	1891      	adds	r1, r2, r2
 80026ac:	6239      	str	r1, [r7, #32]
 80026ae:	415b      	adcs	r3, r3
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
 80026b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026b6:	4641      	mov	r1, r8
 80026b8:	1854      	adds	r4, r2, r1
 80026ba:	4649      	mov	r1, r9
 80026bc:	eb43 0501 	adc.w	r5, r3, r1
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	00eb      	lsls	r3, r5, #3
 80026ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026ce:	00e2      	lsls	r2, r4, #3
 80026d0:	4614      	mov	r4, r2
 80026d2:	461d      	mov	r5, r3
 80026d4:	4643      	mov	r3, r8
 80026d6:	18e3      	adds	r3, r4, r3
 80026d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80026dc:	464b      	mov	r3, r9
 80026de:	eb45 0303 	adc.w	r3, r5, r3
 80026e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80026e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80026f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002702:	4629      	mov	r1, r5
 8002704:	008b      	lsls	r3, r1, #2
 8002706:	4621      	mov	r1, r4
 8002708:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800270c:	4621      	mov	r1, r4
 800270e:	008a      	lsls	r2, r1, #2
 8002710:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002714:	f7fd fdbc 	bl	8000290 <__aeabi_uldivmod>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4b60      	ldr	r3, [pc, #384]	; (80028a0 <UART_SetConfig+0x4e4>)
 800271e:	fba3 2302 	umull	r2, r3, r3, r2
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	011c      	lsls	r4, r3, #4
 8002726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800272a:	2200      	movs	r2, #0
 800272c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002730:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002734:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002738:	4642      	mov	r2, r8
 800273a:	464b      	mov	r3, r9
 800273c:	1891      	adds	r1, r2, r2
 800273e:	61b9      	str	r1, [r7, #24]
 8002740:	415b      	adcs	r3, r3
 8002742:	61fb      	str	r3, [r7, #28]
 8002744:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002748:	4641      	mov	r1, r8
 800274a:	1851      	adds	r1, r2, r1
 800274c:	6139      	str	r1, [r7, #16]
 800274e:	4649      	mov	r1, r9
 8002750:	414b      	adcs	r3, r1
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002760:	4659      	mov	r1, fp
 8002762:	00cb      	lsls	r3, r1, #3
 8002764:	4651      	mov	r1, sl
 8002766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800276a:	4651      	mov	r1, sl
 800276c:	00ca      	lsls	r2, r1, #3
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	4603      	mov	r3, r0
 8002774:	4642      	mov	r2, r8
 8002776:	189b      	adds	r3, r3, r2
 8002778:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800277c:	464b      	mov	r3, r9
 800277e:	460a      	mov	r2, r1
 8002780:	eb42 0303 	adc.w	r3, r2, r3
 8002784:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	67bb      	str	r3, [r7, #120]	; 0x78
 8002792:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80027a0:	4649      	mov	r1, r9
 80027a2:	008b      	lsls	r3, r1, #2
 80027a4:	4641      	mov	r1, r8
 80027a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027aa:	4641      	mov	r1, r8
 80027ac:	008a      	lsls	r2, r1, #2
 80027ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80027b2:	f7fd fd6d 	bl	8000290 <__aeabi_uldivmod>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4b39      	ldr	r3, [pc, #228]	; (80028a0 <UART_SetConfig+0x4e4>)
 80027bc:	fba3 1302 	umull	r1, r3, r3, r2
 80027c0:	095b      	lsrs	r3, r3, #5
 80027c2:	2164      	movs	r1, #100	; 0x64
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	3332      	adds	r3, #50	; 0x32
 80027ce:	4a34      	ldr	r2, [pc, #208]	; (80028a0 <UART_SetConfig+0x4e4>)
 80027d0:	fba2 2303 	umull	r2, r3, r2, r3
 80027d4:	095b      	lsrs	r3, r3, #5
 80027d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027da:	441c      	add	r4, r3
 80027dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027e0:	2200      	movs	r2, #0
 80027e2:	673b      	str	r3, [r7, #112]	; 0x70
 80027e4:	677a      	str	r2, [r7, #116]	; 0x74
 80027e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80027ea:	4642      	mov	r2, r8
 80027ec:	464b      	mov	r3, r9
 80027ee:	1891      	adds	r1, r2, r2
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	415b      	adcs	r3, r3
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027fa:	4641      	mov	r1, r8
 80027fc:	1851      	adds	r1, r2, r1
 80027fe:	6039      	str	r1, [r7, #0]
 8002800:	4649      	mov	r1, r9
 8002802:	414b      	adcs	r3, r1
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002812:	4659      	mov	r1, fp
 8002814:	00cb      	lsls	r3, r1, #3
 8002816:	4651      	mov	r1, sl
 8002818:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800281c:	4651      	mov	r1, sl
 800281e:	00ca      	lsls	r2, r1, #3
 8002820:	4610      	mov	r0, r2
 8002822:	4619      	mov	r1, r3
 8002824:	4603      	mov	r3, r0
 8002826:	4642      	mov	r2, r8
 8002828:	189b      	adds	r3, r3, r2
 800282a:	66bb      	str	r3, [r7, #104]	; 0x68
 800282c:	464b      	mov	r3, r9
 800282e:	460a      	mov	r2, r1
 8002830:	eb42 0303 	adc.w	r3, r2, r3
 8002834:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	663b      	str	r3, [r7, #96]	; 0x60
 8002840:	667a      	str	r2, [r7, #100]	; 0x64
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800284e:	4649      	mov	r1, r9
 8002850:	008b      	lsls	r3, r1, #2
 8002852:	4641      	mov	r1, r8
 8002854:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002858:	4641      	mov	r1, r8
 800285a:	008a      	lsls	r2, r1, #2
 800285c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002860:	f7fd fd16 	bl	8000290 <__aeabi_uldivmod>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <UART_SetConfig+0x4e4>)
 800286a:	fba3 1302 	umull	r1, r3, r3, r2
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	2164      	movs	r1, #100	; 0x64
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	3332      	adds	r3, #50	; 0x32
 800287c:	4a08      	ldr	r2, [pc, #32]	; (80028a0 <UART_SetConfig+0x4e4>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	f003 020f 	and.w	r2, r3, #15
 8002888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4422      	add	r2, r4
 8002890:	609a      	str	r2, [r3, #8]
}
 8002892:	bf00      	nop
 8002894:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002898:	46bd      	mov	sp, r7
 800289a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800289e:	bf00      	nop
 80028a0:	51eb851f 	.word	0x51eb851f

080028a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <SysTick_Handler+0x1c>)
 80028aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80028ac:	f000 f990 	bl	8002bd0 <xTaskGetSchedulerState>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d001      	beq.n	80028ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80028b6:	f000 f9f7 	bl	8002ca8 <xPortSysTickHandler>
  }
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	e000e010 	.word	0xe000e010

080028c4 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	601a      	str	r2, [r3, #0]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6892      	ldr	r2, [r2, #8]
 8002922:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6852      	ldr	r2, [r2, #4]
 800292c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	d103      	bne.n	8002940 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	1e5a      	subs	r2, r3, #1
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800296a:	4b4f      	ldr	r3, [pc, #316]	; (8002aa8 <xTaskIncrementTick+0x148>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	f040 808f 	bne.w	8002a92 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002974:	4b4d      	ldr	r3, [pc, #308]	; (8002aac <xTaskIncrementTick+0x14c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3301      	adds	r3, #1
 800297a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800297c:	4a4b      	ldr	r2, [pc, #300]	; (8002aac <xTaskIncrementTick+0x14c>)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d120      	bne.n	80029ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002988:	4b49      	ldr	r3, [pc, #292]	; (8002ab0 <xTaskIncrementTick+0x150>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002996:	f383 8811 	msr	BASEPRI, r3
 800299a:	f3bf 8f6f 	isb	sy
 800299e:	f3bf 8f4f 	dsb	sy
 80029a2:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80029a4:	bf00      	nop
 80029a6:	e7fe      	b.n	80029a6 <xTaskIncrementTick+0x46>
 80029a8:	4b41      	ldr	r3, [pc, #260]	; (8002ab0 <xTaskIncrementTick+0x150>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	4b41      	ldr	r3, [pc, #260]	; (8002ab4 <xTaskIncrementTick+0x154>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a3f      	ldr	r2, [pc, #252]	; (8002ab0 <xTaskIncrementTick+0x150>)
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4a3f      	ldr	r2, [pc, #252]	; (8002ab4 <xTaskIncrementTick+0x154>)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6013      	str	r3, [r2, #0]
 80029bc:	4b3e      	ldr	r3, [pc, #248]	; (8002ab8 <xTaskIncrementTick+0x158>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3301      	adds	r3, #1
 80029c2:	4a3d      	ldr	r2, [pc, #244]	; (8002ab8 <xTaskIncrementTick+0x158>)
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	f000 f8e3 	bl	8002b90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80029ca:	4b3c      	ldr	r3, [pc, #240]	; (8002abc <xTaskIncrementTick+0x15c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d349      	bcc.n	8002a68 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029d4:	4b36      	ldr	r3, [pc, #216]	; (8002ab0 <xTaskIncrementTick+0x150>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d104      	bne.n	80029e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029de:	4b37      	ldr	r3, [pc, #220]	; (8002abc <xTaskIncrementTick+0x15c>)
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295
 80029e4:	601a      	str	r2, [r3, #0]
					break;
 80029e6:	e03f      	b.n	8002a68 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029e8:	4b31      	ldr	r3, [pc, #196]	; (8002ab0 <xTaskIncrementTick+0x150>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d203      	bcs.n	8002a08 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002a00:	4a2e      	ldr	r2, [pc, #184]	; (8002abc <xTaskIncrementTick+0x15c>)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002a06:	e02f      	b.n	8002a68 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff7d 	bl	800290c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d004      	beq.n	8002a24 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	3318      	adds	r3, #24
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff ff74 	bl	800290c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a28:	4b25      	ldr	r3, [pc, #148]	; (8002ac0 <xTaskIncrementTick+0x160>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d903      	bls.n	8002a38 <xTaskIncrementTick+0xd8>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	4a22      	ldr	r2, [pc, #136]	; (8002ac0 <xTaskIncrementTick+0x160>)
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4a1f      	ldr	r2, [pc, #124]	; (8002ac4 <xTaskIncrementTick+0x164>)
 8002a46:	441a      	add	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4610      	mov	r0, r2
 8002a50:	f7ff ff38 	bl	80028c4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a58:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <xTaskIncrementTick+0x168>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d3b8      	bcc.n	80029d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002a62:	2301      	movs	r3, #1
 8002a64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a66:	e7b5      	b.n	80029d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a68:	4b17      	ldr	r3, [pc, #92]	; (8002ac8 <xTaskIncrementTick+0x168>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6e:	4915      	ldr	r1, [pc, #84]	; (8002ac4 <xTaskIncrementTick+0x164>)
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d901      	bls.n	8002a84 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002a80:	2301      	movs	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002a84:	4b11      	ldr	r3, [pc, #68]	; (8002acc <xTaskIncrementTick+0x16c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d007      	beq.n	8002a9c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	e004      	b.n	8002a9c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002a92:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <xTaskIncrementTick+0x170>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	3301      	adds	r3, #1
 8002a98:	4a0d      	ldr	r2, [pc, #52]	; (8002ad0 <xTaskIncrementTick+0x170>)
 8002a9a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002a9c:	697b      	ldr	r3, [r7, #20]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	200005a8 	.word	0x200005a8
 8002aac:	2000058c 	.word	0x2000058c
 8002ab0:	20000584 	.word	0x20000584
 8002ab4:	20000588 	.word	0x20000588
 8002ab8:	200005a0 	.word	0x200005a0
 8002abc:	200005a4 	.word	0x200005a4
 8002ac0:	20000590 	.word	0x20000590
 8002ac4:	20000124 	.word	0x20000124
 8002ac8:	20000120 	.word	0x20000120
 8002acc:	2000059c 	.word	0x2000059c
 8002ad0:	20000598 	.word	0x20000598

08002ad4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ada:	4b28      	ldr	r3, [pc, #160]	; (8002b7c <vTaskSwitchContext+0xa8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002ae2:	4b27      	ldr	r3, [pc, #156]	; (8002b80 <vTaskSwitchContext+0xac>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002ae8:	e041      	b.n	8002b6e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8002aea:	4b25      	ldr	r3, [pc, #148]	; (8002b80 <vTaskSwitchContext+0xac>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002af0:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <vTaskSwitchContext+0xb0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	e010      	b.n	8002b1a <vTaskSwitchContext+0x46>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10a      	bne.n	8002b14 <vTaskSwitchContext+0x40>
	__asm volatile
 8002afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b02:	f383 8811 	msr	BASEPRI, r3
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	607b      	str	r3, [r7, #4]
}
 8002b10:	bf00      	nop
 8002b12:	e7fe      	b.n	8002b12 <vTaskSwitchContext+0x3e>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	491b      	ldr	r1, [pc, #108]	; (8002b88 <vTaskSwitchContext+0xb4>)
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0e4      	beq.n	8002af8 <vTaskSwitchContext+0x24>
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4a13      	ldr	r2, [pc, #76]	; (8002b88 <vTaskSwitchContext+0xb4>)
 8002b3a:	4413      	add	r3, r2
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	3308      	adds	r3, #8
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d104      	bne.n	8002b5e <vTaskSwitchContext+0x8a>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4a09      	ldr	r2, [pc, #36]	; (8002b8c <vTaskSwitchContext+0xb8>)
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	4a06      	ldr	r2, [pc, #24]	; (8002b84 <vTaskSwitchContext+0xb0>)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6013      	str	r3, [r2, #0]
}
 8002b6e:	bf00      	nop
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	200005a8 	.word	0x200005a8
 8002b80:	2000059c 	.word	0x2000059c
 8002b84:	20000590 	.word	0x20000590
 8002b88:	20000124 	.word	0x20000124
 8002b8c:	20000120 	.word	0x20000120

08002b90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b96:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <prvResetNextTaskUnblockTime+0x38>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d104      	bne.n	8002baa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002ba0:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <prvResetNextTaskUnblockTime+0x3c>)
 8002ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002ba8:	e008      	b.n	8002bbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002baa:	4b07      	ldr	r3, [pc, #28]	; (8002bc8 <prvResetNextTaskUnblockTime+0x38>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <prvResetNextTaskUnblockTime+0x3c>)
 8002bba:	6013      	str	r3, [r2, #0]
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	20000584 	.word	0x20000584
 8002bcc:	200005a4 	.word	0x200005a4

08002bd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <xTaskGetSchedulerState+0x34>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d102      	bne.n	8002be4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002bde:	2301      	movs	r3, #1
 8002be0:	607b      	str	r3, [r7, #4]
 8002be2:	e008      	b.n	8002bf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002be4:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <xTaskGetSchedulerState+0x38>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002bec:	2302      	movs	r3, #2
 8002bee:	607b      	str	r3, [r7, #4]
 8002bf0:	e001      	b.n	8002bf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002bf6:	687b      	ldr	r3, [r7, #4]
	}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	20000594 	.word	0x20000594
 8002c08:	200005a8 	.word	0x200005a8
 8002c0c:	00000000 	.word	0x00000000

08002c10 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002c10:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <pxCurrentTCBConst2>)
 8002c12:	6819      	ldr	r1, [r3, #0]
 8002c14:	6808      	ldr	r0, [r1, #0]
 8002c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c1a:	f380 8809 	msr	PSP, r0
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f04f 0000 	mov.w	r0, #0
 8002c26:	f380 8811 	msr	BASEPRI, r0
 8002c2a:	4770      	bx	lr
 8002c2c:	f3af 8000 	nop.w

08002c30 <pxCurrentTCBConst2>:
 8002c30:	20000120 	.word	0x20000120
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
	...

08002c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002c40:	f3ef 8009 	mrs	r0, PSP
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <pxCurrentTCBConst>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	f01e 0f10 	tst.w	lr, #16
 8002c50:	bf08      	it	eq
 8002c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c5a:	6010      	str	r0, [r2, #0]
 8002c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002c60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002c64:	f380 8811 	msr	BASEPRI, r0
 8002c68:	f3bf 8f4f 	dsb	sy
 8002c6c:	f3bf 8f6f 	isb	sy
 8002c70:	f7ff ff30 	bl	8002ad4 <vTaskSwitchContext>
 8002c74:	f04f 0000 	mov.w	r0, #0
 8002c78:	f380 8811 	msr	BASEPRI, r0
 8002c7c:	bc09      	pop	{r0, r3}
 8002c7e:	6819      	ldr	r1, [r3, #0]
 8002c80:	6808      	ldr	r0, [r1, #0]
 8002c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c86:	f01e 0f10 	tst.w	lr, #16
 8002c8a:	bf08      	it	eq
 8002c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002c90:	f380 8809 	msr	PSP, r0
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	f3af 8000 	nop.w

08002ca0 <pxCurrentTCBConst>:
 8002ca0:	20000120 	.word	0x20000120
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop

08002ca8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
	__asm volatile
 8002cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb2:	f383 8811 	msr	BASEPRI, r3
 8002cb6:	f3bf 8f6f 	isb	sy
 8002cba:	f3bf 8f4f 	dsb	sy
 8002cbe:	607b      	str	r3, [r7, #4]
}
 8002cc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002cc2:	f7ff fe4d 	bl	8002960 <xTaskIncrementTick>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <xPortSysTickHandler+0x40>)
 8002cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002cde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	e000ed04 	.word	0xe000ed04

08002cec <__errno>:
 8002cec:	4b01      	ldr	r3, [pc, #4]	; (8002cf4 <__errno+0x8>)
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	2000000c 	.word	0x2000000c

08002cf8 <__libc_init_array>:
 8002cf8:	b570      	push	{r4, r5, r6, lr}
 8002cfa:	4d0d      	ldr	r5, [pc, #52]	; (8002d30 <__libc_init_array+0x38>)
 8002cfc:	4c0d      	ldr	r4, [pc, #52]	; (8002d34 <__libc_init_array+0x3c>)
 8002cfe:	1b64      	subs	r4, r4, r5
 8002d00:	10a4      	asrs	r4, r4, #2
 8002d02:	2600      	movs	r6, #0
 8002d04:	42a6      	cmp	r6, r4
 8002d06:	d109      	bne.n	8002d1c <__libc_init_array+0x24>
 8002d08:	4d0b      	ldr	r5, [pc, #44]	; (8002d38 <__libc_init_array+0x40>)
 8002d0a:	4c0c      	ldr	r4, [pc, #48]	; (8002d3c <__libc_init_array+0x44>)
 8002d0c:	f000 ffae 	bl	8003c6c <_init>
 8002d10:	1b64      	subs	r4, r4, r5
 8002d12:	10a4      	asrs	r4, r4, #2
 8002d14:	2600      	movs	r6, #0
 8002d16:	42a6      	cmp	r6, r4
 8002d18:	d105      	bne.n	8002d26 <__libc_init_array+0x2e>
 8002d1a:	bd70      	pop	{r4, r5, r6, pc}
 8002d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d20:	4798      	blx	r3
 8002d22:	3601      	adds	r6, #1
 8002d24:	e7ee      	b.n	8002d04 <__libc_init_array+0xc>
 8002d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d2a:	4798      	blx	r3
 8002d2c:	3601      	adds	r6, #1
 8002d2e:	e7f2      	b.n	8002d16 <__libc_init_array+0x1e>
 8002d30:	08003d5c 	.word	0x08003d5c
 8002d34:	08003d5c 	.word	0x08003d5c
 8002d38:	08003d5c 	.word	0x08003d5c
 8002d3c:	08003d60 	.word	0x08003d60

08002d40 <memset>:
 8002d40:	4402      	add	r2, r0
 8002d42:	4603      	mov	r3, r0
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d100      	bne.n	8002d4a <memset+0xa>
 8002d48:	4770      	bx	lr
 8002d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d4e:	e7f9      	b.n	8002d44 <memset+0x4>

08002d50 <iprintf>:
 8002d50:	b40f      	push	{r0, r1, r2, r3}
 8002d52:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <iprintf+0x2c>)
 8002d54:	b513      	push	{r0, r1, r4, lr}
 8002d56:	681c      	ldr	r4, [r3, #0]
 8002d58:	b124      	cbz	r4, 8002d64 <iprintf+0x14>
 8002d5a:	69a3      	ldr	r3, [r4, #24]
 8002d5c:	b913      	cbnz	r3, 8002d64 <iprintf+0x14>
 8002d5e:	4620      	mov	r0, r4
 8002d60:	f000 f866 	bl	8002e30 <__sinit>
 8002d64:	ab05      	add	r3, sp, #20
 8002d66:	9a04      	ldr	r2, [sp, #16]
 8002d68:	68a1      	ldr	r1, [r4, #8]
 8002d6a:	9301      	str	r3, [sp, #4]
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f000 f9bd 	bl	80030ec <_vfiprintf_r>
 8002d72:	b002      	add	sp, #8
 8002d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d78:	b004      	add	sp, #16
 8002d7a:	4770      	bx	lr
 8002d7c:	2000000c 	.word	0x2000000c

08002d80 <std>:
 8002d80:	2300      	movs	r3, #0
 8002d82:	b510      	push	{r4, lr}
 8002d84:	4604      	mov	r4, r0
 8002d86:	e9c0 3300 	strd	r3, r3, [r0]
 8002d8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d8e:	6083      	str	r3, [r0, #8]
 8002d90:	8181      	strh	r1, [r0, #12]
 8002d92:	6643      	str	r3, [r0, #100]	; 0x64
 8002d94:	81c2      	strh	r2, [r0, #14]
 8002d96:	6183      	str	r3, [r0, #24]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	2208      	movs	r2, #8
 8002d9c:	305c      	adds	r0, #92	; 0x5c
 8002d9e:	f7ff ffcf 	bl	8002d40 <memset>
 8002da2:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <std+0x38>)
 8002da4:	6263      	str	r3, [r4, #36]	; 0x24
 8002da6:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <std+0x3c>)
 8002da8:	62a3      	str	r3, [r4, #40]	; 0x28
 8002daa:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <std+0x40>)
 8002dac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <std+0x44>)
 8002db0:	6224      	str	r4, [r4, #32]
 8002db2:	6323      	str	r3, [r4, #48]	; 0x30
 8002db4:	bd10      	pop	{r4, pc}
 8002db6:	bf00      	nop
 8002db8:	08003695 	.word	0x08003695
 8002dbc:	080036b7 	.word	0x080036b7
 8002dc0:	080036ef 	.word	0x080036ef
 8002dc4:	08003713 	.word	0x08003713

08002dc8 <_cleanup_r>:
 8002dc8:	4901      	ldr	r1, [pc, #4]	; (8002dd0 <_cleanup_r+0x8>)
 8002dca:	f000 b8af 	b.w	8002f2c <_fwalk_reent>
 8002dce:	bf00      	nop
 8002dd0:	080039ed 	.word	0x080039ed

08002dd4 <__sfmoreglue>:
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	2268      	movs	r2, #104	; 0x68
 8002dd8:	1e4d      	subs	r5, r1, #1
 8002dda:	4355      	muls	r5, r2
 8002ddc:	460e      	mov	r6, r1
 8002dde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002de2:	f000 f8e5 	bl	8002fb0 <_malloc_r>
 8002de6:	4604      	mov	r4, r0
 8002de8:	b140      	cbz	r0, 8002dfc <__sfmoreglue+0x28>
 8002dea:	2100      	movs	r1, #0
 8002dec:	e9c0 1600 	strd	r1, r6, [r0]
 8002df0:	300c      	adds	r0, #12
 8002df2:	60a0      	str	r0, [r4, #8]
 8002df4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002df8:	f7ff ffa2 	bl	8002d40 <memset>
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	bd70      	pop	{r4, r5, r6, pc}

08002e00 <__sfp_lock_acquire>:
 8002e00:	4801      	ldr	r0, [pc, #4]	; (8002e08 <__sfp_lock_acquire+0x8>)
 8002e02:	f000 b8b3 	b.w	8002f6c <__retarget_lock_acquire_recursive>
 8002e06:	bf00      	nop
 8002e08:	200005ad 	.word	0x200005ad

08002e0c <__sfp_lock_release>:
 8002e0c:	4801      	ldr	r0, [pc, #4]	; (8002e14 <__sfp_lock_release+0x8>)
 8002e0e:	f000 b8ae 	b.w	8002f6e <__retarget_lock_release_recursive>
 8002e12:	bf00      	nop
 8002e14:	200005ad 	.word	0x200005ad

08002e18 <__sinit_lock_acquire>:
 8002e18:	4801      	ldr	r0, [pc, #4]	; (8002e20 <__sinit_lock_acquire+0x8>)
 8002e1a:	f000 b8a7 	b.w	8002f6c <__retarget_lock_acquire_recursive>
 8002e1e:	bf00      	nop
 8002e20:	200005ae 	.word	0x200005ae

08002e24 <__sinit_lock_release>:
 8002e24:	4801      	ldr	r0, [pc, #4]	; (8002e2c <__sinit_lock_release+0x8>)
 8002e26:	f000 b8a2 	b.w	8002f6e <__retarget_lock_release_recursive>
 8002e2a:	bf00      	nop
 8002e2c:	200005ae 	.word	0x200005ae

08002e30 <__sinit>:
 8002e30:	b510      	push	{r4, lr}
 8002e32:	4604      	mov	r4, r0
 8002e34:	f7ff fff0 	bl	8002e18 <__sinit_lock_acquire>
 8002e38:	69a3      	ldr	r3, [r4, #24]
 8002e3a:	b11b      	cbz	r3, 8002e44 <__sinit+0x14>
 8002e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e40:	f7ff bff0 	b.w	8002e24 <__sinit_lock_release>
 8002e44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002e48:	6523      	str	r3, [r4, #80]	; 0x50
 8002e4a:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <__sinit+0x68>)
 8002e4c:	4a13      	ldr	r2, [pc, #76]	; (8002e9c <__sinit+0x6c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	62a2      	str	r2, [r4, #40]	; 0x28
 8002e52:	42a3      	cmp	r3, r4
 8002e54:	bf04      	itt	eq
 8002e56:	2301      	moveq	r3, #1
 8002e58:	61a3      	streq	r3, [r4, #24]
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	f000 f820 	bl	8002ea0 <__sfp>
 8002e60:	6060      	str	r0, [r4, #4]
 8002e62:	4620      	mov	r0, r4
 8002e64:	f000 f81c 	bl	8002ea0 <__sfp>
 8002e68:	60a0      	str	r0, [r4, #8]
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	f000 f818 	bl	8002ea0 <__sfp>
 8002e70:	2200      	movs	r2, #0
 8002e72:	60e0      	str	r0, [r4, #12]
 8002e74:	2104      	movs	r1, #4
 8002e76:	6860      	ldr	r0, [r4, #4]
 8002e78:	f7ff ff82 	bl	8002d80 <std>
 8002e7c:	68a0      	ldr	r0, [r4, #8]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	2109      	movs	r1, #9
 8002e82:	f7ff ff7d 	bl	8002d80 <std>
 8002e86:	68e0      	ldr	r0, [r4, #12]
 8002e88:	2202      	movs	r2, #2
 8002e8a:	2112      	movs	r1, #18
 8002e8c:	f7ff ff78 	bl	8002d80 <std>
 8002e90:	2301      	movs	r3, #1
 8002e92:	61a3      	str	r3, [r4, #24]
 8002e94:	e7d2      	b.n	8002e3c <__sinit+0xc>
 8002e96:	bf00      	nop
 8002e98:	08003cbc 	.word	0x08003cbc
 8002e9c:	08002dc9 	.word	0x08002dc9

08002ea0 <__sfp>:
 8002ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea2:	4607      	mov	r7, r0
 8002ea4:	f7ff ffac 	bl	8002e00 <__sfp_lock_acquire>
 8002ea8:	4b1e      	ldr	r3, [pc, #120]	; (8002f24 <__sfp+0x84>)
 8002eaa:	681e      	ldr	r6, [r3, #0]
 8002eac:	69b3      	ldr	r3, [r6, #24]
 8002eae:	b913      	cbnz	r3, 8002eb6 <__sfp+0x16>
 8002eb0:	4630      	mov	r0, r6
 8002eb2:	f7ff ffbd 	bl	8002e30 <__sinit>
 8002eb6:	3648      	adds	r6, #72	; 0x48
 8002eb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	d503      	bpl.n	8002ec8 <__sfp+0x28>
 8002ec0:	6833      	ldr	r3, [r6, #0]
 8002ec2:	b30b      	cbz	r3, 8002f08 <__sfp+0x68>
 8002ec4:	6836      	ldr	r6, [r6, #0]
 8002ec6:	e7f7      	b.n	8002eb8 <__sfp+0x18>
 8002ec8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002ecc:	b9d5      	cbnz	r5, 8002f04 <__sfp+0x64>
 8002ece:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <__sfp+0x88>)
 8002ed0:	60e3      	str	r3, [r4, #12]
 8002ed2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ed6:	6665      	str	r5, [r4, #100]	; 0x64
 8002ed8:	f000 f847 	bl	8002f6a <__retarget_lock_init_recursive>
 8002edc:	f7ff ff96 	bl	8002e0c <__sfp_lock_release>
 8002ee0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002ee4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002ee8:	6025      	str	r5, [r4, #0]
 8002eea:	61a5      	str	r5, [r4, #24]
 8002eec:	2208      	movs	r2, #8
 8002eee:	4629      	mov	r1, r5
 8002ef0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002ef4:	f7ff ff24 	bl	8002d40 <memset>
 8002ef8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002efc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002f00:	4620      	mov	r0, r4
 8002f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f04:	3468      	adds	r4, #104	; 0x68
 8002f06:	e7d9      	b.n	8002ebc <__sfp+0x1c>
 8002f08:	2104      	movs	r1, #4
 8002f0a:	4638      	mov	r0, r7
 8002f0c:	f7ff ff62 	bl	8002dd4 <__sfmoreglue>
 8002f10:	4604      	mov	r4, r0
 8002f12:	6030      	str	r0, [r6, #0]
 8002f14:	2800      	cmp	r0, #0
 8002f16:	d1d5      	bne.n	8002ec4 <__sfp+0x24>
 8002f18:	f7ff ff78 	bl	8002e0c <__sfp_lock_release>
 8002f1c:	230c      	movs	r3, #12
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	e7ee      	b.n	8002f00 <__sfp+0x60>
 8002f22:	bf00      	nop
 8002f24:	08003cbc 	.word	0x08003cbc
 8002f28:	ffff0001 	.word	0xffff0001

08002f2c <_fwalk_reent>:
 8002f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f30:	4606      	mov	r6, r0
 8002f32:	4688      	mov	r8, r1
 8002f34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002f38:	2700      	movs	r7, #0
 8002f3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f3e:	f1b9 0901 	subs.w	r9, r9, #1
 8002f42:	d505      	bpl.n	8002f50 <_fwalk_reent+0x24>
 8002f44:	6824      	ldr	r4, [r4, #0]
 8002f46:	2c00      	cmp	r4, #0
 8002f48:	d1f7      	bne.n	8002f3a <_fwalk_reent+0xe>
 8002f4a:	4638      	mov	r0, r7
 8002f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f50:	89ab      	ldrh	r3, [r5, #12]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d907      	bls.n	8002f66 <_fwalk_reent+0x3a>
 8002f56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	d003      	beq.n	8002f66 <_fwalk_reent+0x3a>
 8002f5e:	4629      	mov	r1, r5
 8002f60:	4630      	mov	r0, r6
 8002f62:	47c0      	blx	r8
 8002f64:	4307      	orrs	r7, r0
 8002f66:	3568      	adds	r5, #104	; 0x68
 8002f68:	e7e9      	b.n	8002f3e <_fwalk_reent+0x12>

08002f6a <__retarget_lock_init_recursive>:
 8002f6a:	4770      	bx	lr

08002f6c <__retarget_lock_acquire_recursive>:
 8002f6c:	4770      	bx	lr

08002f6e <__retarget_lock_release_recursive>:
 8002f6e:	4770      	bx	lr

08002f70 <sbrk_aligned>:
 8002f70:	b570      	push	{r4, r5, r6, lr}
 8002f72:	4e0e      	ldr	r6, [pc, #56]	; (8002fac <sbrk_aligned+0x3c>)
 8002f74:	460c      	mov	r4, r1
 8002f76:	6831      	ldr	r1, [r6, #0]
 8002f78:	4605      	mov	r5, r0
 8002f7a:	b911      	cbnz	r1, 8002f82 <sbrk_aligned+0x12>
 8002f7c:	f000 fb7a 	bl	8003674 <_sbrk_r>
 8002f80:	6030      	str	r0, [r6, #0]
 8002f82:	4621      	mov	r1, r4
 8002f84:	4628      	mov	r0, r5
 8002f86:	f000 fb75 	bl	8003674 <_sbrk_r>
 8002f8a:	1c43      	adds	r3, r0, #1
 8002f8c:	d00a      	beq.n	8002fa4 <sbrk_aligned+0x34>
 8002f8e:	1cc4      	adds	r4, r0, #3
 8002f90:	f024 0403 	bic.w	r4, r4, #3
 8002f94:	42a0      	cmp	r0, r4
 8002f96:	d007      	beq.n	8002fa8 <sbrk_aligned+0x38>
 8002f98:	1a21      	subs	r1, r4, r0
 8002f9a:	4628      	mov	r0, r5
 8002f9c:	f000 fb6a 	bl	8003674 <_sbrk_r>
 8002fa0:	3001      	adds	r0, #1
 8002fa2:	d101      	bne.n	8002fa8 <sbrk_aligned+0x38>
 8002fa4:	f04f 34ff 	mov.w	r4, #4294967295
 8002fa8:	4620      	mov	r0, r4
 8002faa:	bd70      	pop	{r4, r5, r6, pc}
 8002fac:	200005b4 	.word	0x200005b4

08002fb0 <_malloc_r>:
 8002fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fb4:	1ccd      	adds	r5, r1, #3
 8002fb6:	f025 0503 	bic.w	r5, r5, #3
 8002fba:	3508      	adds	r5, #8
 8002fbc:	2d0c      	cmp	r5, #12
 8002fbe:	bf38      	it	cc
 8002fc0:	250c      	movcc	r5, #12
 8002fc2:	2d00      	cmp	r5, #0
 8002fc4:	4607      	mov	r7, r0
 8002fc6:	db01      	blt.n	8002fcc <_malloc_r+0x1c>
 8002fc8:	42a9      	cmp	r1, r5
 8002fca:	d905      	bls.n	8002fd8 <_malloc_r+0x28>
 8002fcc:	230c      	movs	r3, #12
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	2600      	movs	r6, #0
 8002fd2:	4630      	mov	r0, r6
 8002fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fd8:	4e2e      	ldr	r6, [pc, #184]	; (8003094 <_malloc_r+0xe4>)
 8002fda:	f000 fdbb 	bl	8003b54 <__malloc_lock>
 8002fde:	6833      	ldr	r3, [r6, #0]
 8002fe0:	461c      	mov	r4, r3
 8002fe2:	bb34      	cbnz	r4, 8003032 <_malloc_r+0x82>
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	4638      	mov	r0, r7
 8002fe8:	f7ff ffc2 	bl	8002f70 <sbrk_aligned>
 8002fec:	1c43      	adds	r3, r0, #1
 8002fee:	4604      	mov	r4, r0
 8002ff0:	d14d      	bne.n	800308e <_malloc_r+0xde>
 8002ff2:	6834      	ldr	r4, [r6, #0]
 8002ff4:	4626      	mov	r6, r4
 8002ff6:	2e00      	cmp	r6, #0
 8002ff8:	d140      	bne.n	800307c <_malloc_r+0xcc>
 8002ffa:	6823      	ldr	r3, [r4, #0]
 8002ffc:	4631      	mov	r1, r6
 8002ffe:	4638      	mov	r0, r7
 8003000:	eb04 0803 	add.w	r8, r4, r3
 8003004:	f000 fb36 	bl	8003674 <_sbrk_r>
 8003008:	4580      	cmp	r8, r0
 800300a:	d13a      	bne.n	8003082 <_malloc_r+0xd2>
 800300c:	6821      	ldr	r1, [r4, #0]
 800300e:	3503      	adds	r5, #3
 8003010:	1a6d      	subs	r5, r5, r1
 8003012:	f025 0503 	bic.w	r5, r5, #3
 8003016:	3508      	adds	r5, #8
 8003018:	2d0c      	cmp	r5, #12
 800301a:	bf38      	it	cc
 800301c:	250c      	movcc	r5, #12
 800301e:	4629      	mov	r1, r5
 8003020:	4638      	mov	r0, r7
 8003022:	f7ff ffa5 	bl	8002f70 <sbrk_aligned>
 8003026:	3001      	adds	r0, #1
 8003028:	d02b      	beq.n	8003082 <_malloc_r+0xd2>
 800302a:	6823      	ldr	r3, [r4, #0]
 800302c:	442b      	add	r3, r5
 800302e:	6023      	str	r3, [r4, #0]
 8003030:	e00e      	b.n	8003050 <_malloc_r+0xa0>
 8003032:	6822      	ldr	r2, [r4, #0]
 8003034:	1b52      	subs	r2, r2, r5
 8003036:	d41e      	bmi.n	8003076 <_malloc_r+0xc6>
 8003038:	2a0b      	cmp	r2, #11
 800303a:	d916      	bls.n	800306a <_malloc_r+0xba>
 800303c:	1961      	adds	r1, r4, r5
 800303e:	42a3      	cmp	r3, r4
 8003040:	6025      	str	r5, [r4, #0]
 8003042:	bf18      	it	ne
 8003044:	6059      	strne	r1, [r3, #4]
 8003046:	6863      	ldr	r3, [r4, #4]
 8003048:	bf08      	it	eq
 800304a:	6031      	streq	r1, [r6, #0]
 800304c:	5162      	str	r2, [r4, r5]
 800304e:	604b      	str	r3, [r1, #4]
 8003050:	4638      	mov	r0, r7
 8003052:	f104 060b 	add.w	r6, r4, #11
 8003056:	f000 fd83 	bl	8003b60 <__malloc_unlock>
 800305a:	f026 0607 	bic.w	r6, r6, #7
 800305e:	1d23      	adds	r3, r4, #4
 8003060:	1af2      	subs	r2, r6, r3
 8003062:	d0b6      	beq.n	8002fd2 <_malloc_r+0x22>
 8003064:	1b9b      	subs	r3, r3, r6
 8003066:	50a3      	str	r3, [r4, r2]
 8003068:	e7b3      	b.n	8002fd2 <_malloc_r+0x22>
 800306a:	6862      	ldr	r2, [r4, #4]
 800306c:	42a3      	cmp	r3, r4
 800306e:	bf0c      	ite	eq
 8003070:	6032      	streq	r2, [r6, #0]
 8003072:	605a      	strne	r2, [r3, #4]
 8003074:	e7ec      	b.n	8003050 <_malloc_r+0xa0>
 8003076:	4623      	mov	r3, r4
 8003078:	6864      	ldr	r4, [r4, #4]
 800307a:	e7b2      	b.n	8002fe2 <_malloc_r+0x32>
 800307c:	4634      	mov	r4, r6
 800307e:	6876      	ldr	r6, [r6, #4]
 8003080:	e7b9      	b.n	8002ff6 <_malloc_r+0x46>
 8003082:	230c      	movs	r3, #12
 8003084:	603b      	str	r3, [r7, #0]
 8003086:	4638      	mov	r0, r7
 8003088:	f000 fd6a 	bl	8003b60 <__malloc_unlock>
 800308c:	e7a1      	b.n	8002fd2 <_malloc_r+0x22>
 800308e:	6025      	str	r5, [r4, #0]
 8003090:	e7de      	b.n	8003050 <_malloc_r+0xa0>
 8003092:	bf00      	nop
 8003094:	200005b0 	.word	0x200005b0

08003098 <__sfputc_r>:
 8003098:	6893      	ldr	r3, [r2, #8]
 800309a:	3b01      	subs	r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	b410      	push	{r4}
 80030a0:	6093      	str	r3, [r2, #8]
 80030a2:	da08      	bge.n	80030b6 <__sfputc_r+0x1e>
 80030a4:	6994      	ldr	r4, [r2, #24]
 80030a6:	42a3      	cmp	r3, r4
 80030a8:	db01      	blt.n	80030ae <__sfputc_r+0x16>
 80030aa:	290a      	cmp	r1, #10
 80030ac:	d103      	bne.n	80030b6 <__sfputc_r+0x1e>
 80030ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030b2:	f000 bb33 	b.w	800371c <__swbuf_r>
 80030b6:	6813      	ldr	r3, [r2, #0]
 80030b8:	1c58      	adds	r0, r3, #1
 80030ba:	6010      	str	r0, [r2, #0]
 80030bc:	7019      	strb	r1, [r3, #0]
 80030be:	4608      	mov	r0, r1
 80030c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <__sfputs_r>:
 80030c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c8:	4606      	mov	r6, r0
 80030ca:	460f      	mov	r7, r1
 80030cc:	4614      	mov	r4, r2
 80030ce:	18d5      	adds	r5, r2, r3
 80030d0:	42ac      	cmp	r4, r5
 80030d2:	d101      	bne.n	80030d8 <__sfputs_r+0x12>
 80030d4:	2000      	movs	r0, #0
 80030d6:	e007      	b.n	80030e8 <__sfputs_r+0x22>
 80030d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030dc:	463a      	mov	r2, r7
 80030de:	4630      	mov	r0, r6
 80030e0:	f7ff ffda 	bl	8003098 <__sfputc_r>
 80030e4:	1c43      	adds	r3, r0, #1
 80030e6:	d1f3      	bne.n	80030d0 <__sfputs_r+0xa>
 80030e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080030ec <_vfiprintf_r>:
 80030ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030f0:	460d      	mov	r5, r1
 80030f2:	b09d      	sub	sp, #116	; 0x74
 80030f4:	4614      	mov	r4, r2
 80030f6:	4698      	mov	r8, r3
 80030f8:	4606      	mov	r6, r0
 80030fa:	b118      	cbz	r0, 8003104 <_vfiprintf_r+0x18>
 80030fc:	6983      	ldr	r3, [r0, #24]
 80030fe:	b90b      	cbnz	r3, 8003104 <_vfiprintf_r+0x18>
 8003100:	f7ff fe96 	bl	8002e30 <__sinit>
 8003104:	4b89      	ldr	r3, [pc, #548]	; (800332c <_vfiprintf_r+0x240>)
 8003106:	429d      	cmp	r5, r3
 8003108:	d11b      	bne.n	8003142 <_vfiprintf_r+0x56>
 800310a:	6875      	ldr	r5, [r6, #4]
 800310c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800310e:	07d9      	lsls	r1, r3, #31
 8003110:	d405      	bmi.n	800311e <_vfiprintf_r+0x32>
 8003112:	89ab      	ldrh	r3, [r5, #12]
 8003114:	059a      	lsls	r2, r3, #22
 8003116:	d402      	bmi.n	800311e <_vfiprintf_r+0x32>
 8003118:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800311a:	f7ff ff27 	bl	8002f6c <__retarget_lock_acquire_recursive>
 800311e:	89ab      	ldrh	r3, [r5, #12]
 8003120:	071b      	lsls	r3, r3, #28
 8003122:	d501      	bpl.n	8003128 <_vfiprintf_r+0x3c>
 8003124:	692b      	ldr	r3, [r5, #16]
 8003126:	b9eb      	cbnz	r3, 8003164 <_vfiprintf_r+0x78>
 8003128:	4629      	mov	r1, r5
 800312a:	4630      	mov	r0, r6
 800312c:	f000 fb5a 	bl	80037e4 <__swsetup_r>
 8003130:	b1c0      	cbz	r0, 8003164 <_vfiprintf_r+0x78>
 8003132:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003134:	07dc      	lsls	r4, r3, #31
 8003136:	d50e      	bpl.n	8003156 <_vfiprintf_r+0x6a>
 8003138:	f04f 30ff 	mov.w	r0, #4294967295
 800313c:	b01d      	add	sp, #116	; 0x74
 800313e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003142:	4b7b      	ldr	r3, [pc, #492]	; (8003330 <_vfiprintf_r+0x244>)
 8003144:	429d      	cmp	r5, r3
 8003146:	d101      	bne.n	800314c <_vfiprintf_r+0x60>
 8003148:	68b5      	ldr	r5, [r6, #8]
 800314a:	e7df      	b.n	800310c <_vfiprintf_r+0x20>
 800314c:	4b79      	ldr	r3, [pc, #484]	; (8003334 <_vfiprintf_r+0x248>)
 800314e:	429d      	cmp	r5, r3
 8003150:	bf08      	it	eq
 8003152:	68f5      	ldreq	r5, [r6, #12]
 8003154:	e7da      	b.n	800310c <_vfiprintf_r+0x20>
 8003156:	89ab      	ldrh	r3, [r5, #12]
 8003158:	0598      	lsls	r0, r3, #22
 800315a:	d4ed      	bmi.n	8003138 <_vfiprintf_r+0x4c>
 800315c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800315e:	f7ff ff06 	bl	8002f6e <__retarget_lock_release_recursive>
 8003162:	e7e9      	b.n	8003138 <_vfiprintf_r+0x4c>
 8003164:	2300      	movs	r3, #0
 8003166:	9309      	str	r3, [sp, #36]	; 0x24
 8003168:	2320      	movs	r3, #32
 800316a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800316e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003172:	2330      	movs	r3, #48	; 0x30
 8003174:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003338 <_vfiprintf_r+0x24c>
 8003178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800317c:	f04f 0901 	mov.w	r9, #1
 8003180:	4623      	mov	r3, r4
 8003182:	469a      	mov	sl, r3
 8003184:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003188:	b10a      	cbz	r2, 800318e <_vfiprintf_r+0xa2>
 800318a:	2a25      	cmp	r2, #37	; 0x25
 800318c:	d1f9      	bne.n	8003182 <_vfiprintf_r+0x96>
 800318e:	ebba 0b04 	subs.w	fp, sl, r4
 8003192:	d00b      	beq.n	80031ac <_vfiprintf_r+0xc0>
 8003194:	465b      	mov	r3, fp
 8003196:	4622      	mov	r2, r4
 8003198:	4629      	mov	r1, r5
 800319a:	4630      	mov	r0, r6
 800319c:	f7ff ff93 	bl	80030c6 <__sfputs_r>
 80031a0:	3001      	adds	r0, #1
 80031a2:	f000 80aa 	beq.w	80032fa <_vfiprintf_r+0x20e>
 80031a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031a8:	445a      	add	r2, fp
 80031aa:	9209      	str	r2, [sp, #36]	; 0x24
 80031ac:	f89a 3000 	ldrb.w	r3, [sl]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 80a2 	beq.w	80032fa <_vfiprintf_r+0x20e>
 80031b6:	2300      	movs	r3, #0
 80031b8:	f04f 32ff 	mov.w	r2, #4294967295
 80031bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031c0:	f10a 0a01 	add.w	sl, sl, #1
 80031c4:	9304      	str	r3, [sp, #16]
 80031c6:	9307      	str	r3, [sp, #28]
 80031c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031cc:	931a      	str	r3, [sp, #104]	; 0x68
 80031ce:	4654      	mov	r4, sl
 80031d0:	2205      	movs	r2, #5
 80031d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031d6:	4858      	ldr	r0, [pc, #352]	; (8003338 <_vfiprintf_r+0x24c>)
 80031d8:	f7fd f80a 	bl	80001f0 <memchr>
 80031dc:	9a04      	ldr	r2, [sp, #16]
 80031de:	b9d8      	cbnz	r0, 8003218 <_vfiprintf_r+0x12c>
 80031e0:	06d1      	lsls	r1, r2, #27
 80031e2:	bf44      	itt	mi
 80031e4:	2320      	movmi	r3, #32
 80031e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031ea:	0713      	lsls	r3, r2, #28
 80031ec:	bf44      	itt	mi
 80031ee:	232b      	movmi	r3, #43	; 0x2b
 80031f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031f4:	f89a 3000 	ldrb.w	r3, [sl]
 80031f8:	2b2a      	cmp	r3, #42	; 0x2a
 80031fa:	d015      	beq.n	8003228 <_vfiprintf_r+0x13c>
 80031fc:	9a07      	ldr	r2, [sp, #28]
 80031fe:	4654      	mov	r4, sl
 8003200:	2000      	movs	r0, #0
 8003202:	f04f 0c0a 	mov.w	ip, #10
 8003206:	4621      	mov	r1, r4
 8003208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800320c:	3b30      	subs	r3, #48	; 0x30
 800320e:	2b09      	cmp	r3, #9
 8003210:	d94e      	bls.n	80032b0 <_vfiprintf_r+0x1c4>
 8003212:	b1b0      	cbz	r0, 8003242 <_vfiprintf_r+0x156>
 8003214:	9207      	str	r2, [sp, #28]
 8003216:	e014      	b.n	8003242 <_vfiprintf_r+0x156>
 8003218:	eba0 0308 	sub.w	r3, r0, r8
 800321c:	fa09 f303 	lsl.w	r3, r9, r3
 8003220:	4313      	orrs	r3, r2
 8003222:	9304      	str	r3, [sp, #16]
 8003224:	46a2      	mov	sl, r4
 8003226:	e7d2      	b.n	80031ce <_vfiprintf_r+0xe2>
 8003228:	9b03      	ldr	r3, [sp, #12]
 800322a:	1d19      	adds	r1, r3, #4
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	9103      	str	r1, [sp, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	bfbb      	ittet	lt
 8003234:	425b      	neglt	r3, r3
 8003236:	f042 0202 	orrlt.w	r2, r2, #2
 800323a:	9307      	strge	r3, [sp, #28]
 800323c:	9307      	strlt	r3, [sp, #28]
 800323e:	bfb8      	it	lt
 8003240:	9204      	strlt	r2, [sp, #16]
 8003242:	7823      	ldrb	r3, [r4, #0]
 8003244:	2b2e      	cmp	r3, #46	; 0x2e
 8003246:	d10c      	bne.n	8003262 <_vfiprintf_r+0x176>
 8003248:	7863      	ldrb	r3, [r4, #1]
 800324a:	2b2a      	cmp	r3, #42	; 0x2a
 800324c:	d135      	bne.n	80032ba <_vfiprintf_r+0x1ce>
 800324e:	9b03      	ldr	r3, [sp, #12]
 8003250:	1d1a      	adds	r2, r3, #4
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	9203      	str	r2, [sp, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	bfb8      	it	lt
 800325a:	f04f 33ff 	movlt.w	r3, #4294967295
 800325e:	3402      	adds	r4, #2
 8003260:	9305      	str	r3, [sp, #20]
 8003262:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003348 <_vfiprintf_r+0x25c>
 8003266:	7821      	ldrb	r1, [r4, #0]
 8003268:	2203      	movs	r2, #3
 800326a:	4650      	mov	r0, sl
 800326c:	f7fc ffc0 	bl	80001f0 <memchr>
 8003270:	b140      	cbz	r0, 8003284 <_vfiprintf_r+0x198>
 8003272:	2340      	movs	r3, #64	; 0x40
 8003274:	eba0 000a 	sub.w	r0, r0, sl
 8003278:	fa03 f000 	lsl.w	r0, r3, r0
 800327c:	9b04      	ldr	r3, [sp, #16]
 800327e:	4303      	orrs	r3, r0
 8003280:	3401      	adds	r4, #1
 8003282:	9304      	str	r3, [sp, #16]
 8003284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003288:	482c      	ldr	r0, [pc, #176]	; (800333c <_vfiprintf_r+0x250>)
 800328a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800328e:	2206      	movs	r2, #6
 8003290:	f7fc ffae 	bl	80001f0 <memchr>
 8003294:	2800      	cmp	r0, #0
 8003296:	d03f      	beq.n	8003318 <_vfiprintf_r+0x22c>
 8003298:	4b29      	ldr	r3, [pc, #164]	; (8003340 <_vfiprintf_r+0x254>)
 800329a:	bb1b      	cbnz	r3, 80032e4 <_vfiprintf_r+0x1f8>
 800329c:	9b03      	ldr	r3, [sp, #12]
 800329e:	3307      	adds	r3, #7
 80032a0:	f023 0307 	bic.w	r3, r3, #7
 80032a4:	3308      	adds	r3, #8
 80032a6:	9303      	str	r3, [sp, #12]
 80032a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032aa:	443b      	add	r3, r7
 80032ac:	9309      	str	r3, [sp, #36]	; 0x24
 80032ae:	e767      	b.n	8003180 <_vfiprintf_r+0x94>
 80032b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80032b4:	460c      	mov	r4, r1
 80032b6:	2001      	movs	r0, #1
 80032b8:	e7a5      	b.n	8003206 <_vfiprintf_r+0x11a>
 80032ba:	2300      	movs	r3, #0
 80032bc:	3401      	adds	r4, #1
 80032be:	9305      	str	r3, [sp, #20]
 80032c0:	4619      	mov	r1, r3
 80032c2:	f04f 0c0a 	mov.w	ip, #10
 80032c6:	4620      	mov	r0, r4
 80032c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032cc:	3a30      	subs	r2, #48	; 0x30
 80032ce:	2a09      	cmp	r2, #9
 80032d0:	d903      	bls.n	80032da <_vfiprintf_r+0x1ee>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0c5      	beq.n	8003262 <_vfiprintf_r+0x176>
 80032d6:	9105      	str	r1, [sp, #20]
 80032d8:	e7c3      	b.n	8003262 <_vfiprintf_r+0x176>
 80032da:	fb0c 2101 	mla	r1, ip, r1, r2
 80032de:	4604      	mov	r4, r0
 80032e0:	2301      	movs	r3, #1
 80032e2:	e7f0      	b.n	80032c6 <_vfiprintf_r+0x1da>
 80032e4:	ab03      	add	r3, sp, #12
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	462a      	mov	r2, r5
 80032ea:	4b16      	ldr	r3, [pc, #88]	; (8003344 <_vfiprintf_r+0x258>)
 80032ec:	a904      	add	r1, sp, #16
 80032ee:	4630      	mov	r0, r6
 80032f0:	f3af 8000 	nop.w
 80032f4:	4607      	mov	r7, r0
 80032f6:	1c78      	adds	r0, r7, #1
 80032f8:	d1d6      	bne.n	80032a8 <_vfiprintf_r+0x1bc>
 80032fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80032fc:	07d9      	lsls	r1, r3, #31
 80032fe:	d405      	bmi.n	800330c <_vfiprintf_r+0x220>
 8003300:	89ab      	ldrh	r3, [r5, #12]
 8003302:	059a      	lsls	r2, r3, #22
 8003304:	d402      	bmi.n	800330c <_vfiprintf_r+0x220>
 8003306:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003308:	f7ff fe31 	bl	8002f6e <__retarget_lock_release_recursive>
 800330c:	89ab      	ldrh	r3, [r5, #12]
 800330e:	065b      	lsls	r3, r3, #25
 8003310:	f53f af12 	bmi.w	8003138 <_vfiprintf_r+0x4c>
 8003314:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003316:	e711      	b.n	800313c <_vfiprintf_r+0x50>
 8003318:	ab03      	add	r3, sp, #12
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	462a      	mov	r2, r5
 800331e:	4b09      	ldr	r3, [pc, #36]	; (8003344 <_vfiprintf_r+0x258>)
 8003320:	a904      	add	r1, sp, #16
 8003322:	4630      	mov	r0, r6
 8003324:	f000 f880 	bl	8003428 <_printf_i>
 8003328:	e7e4      	b.n	80032f4 <_vfiprintf_r+0x208>
 800332a:	bf00      	nop
 800332c:	08003ce0 	.word	0x08003ce0
 8003330:	08003d00 	.word	0x08003d00
 8003334:	08003cc0 	.word	0x08003cc0
 8003338:	08003d20 	.word	0x08003d20
 800333c:	08003d2a 	.word	0x08003d2a
 8003340:	00000000 	.word	0x00000000
 8003344:	080030c7 	.word	0x080030c7
 8003348:	08003d26 	.word	0x08003d26

0800334c <_printf_common>:
 800334c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003350:	4616      	mov	r6, r2
 8003352:	4699      	mov	r9, r3
 8003354:	688a      	ldr	r2, [r1, #8]
 8003356:	690b      	ldr	r3, [r1, #16]
 8003358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800335c:	4293      	cmp	r3, r2
 800335e:	bfb8      	it	lt
 8003360:	4613      	movlt	r3, r2
 8003362:	6033      	str	r3, [r6, #0]
 8003364:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003368:	4607      	mov	r7, r0
 800336a:	460c      	mov	r4, r1
 800336c:	b10a      	cbz	r2, 8003372 <_printf_common+0x26>
 800336e:	3301      	adds	r3, #1
 8003370:	6033      	str	r3, [r6, #0]
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	0699      	lsls	r1, r3, #26
 8003376:	bf42      	ittt	mi
 8003378:	6833      	ldrmi	r3, [r6, #0]
 800337a:	3302      	addmi	r3, #2
 800337c:	6033      	strmi	r3, [r6, #0]
 800337e:	6825      	ldr	r5, [r4, #0]
 8003380:	f015 0506 	ands.w	r5, r5, #6
 8003384:	d106      	bne.n	8003394 <_printf_common+0x48>
 8003386:	f104 0a19 	add.w	sl, r4, #25
 800338a:	68e3      	ldr	r3, [r4, #12]
 800338c:	6832      	ldr	r2, [r6, #0]
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	42ab      	cmp	r3, r5
 8003392:	dc26      	bgt.n	80033e2 <_printf_common+0x96>
 8003394:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003398:	1e13      	subs	r3, r2, #0
 800339a:	6822      	ldr	r2, [r4, #0]
 800339c:	bf18      	it	ne
 800339e:	2301      	movne	r3, #1
 80033a0:	0692      	lsls	r2, r2, #26
 80033a2:	d42b      	bmi.n	80033fc <_printf_common+0xb0>
 80033a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033a8:	4649      	mov	r1, r9
 80033aa:	4638      	mov	r0, r7
 80033ac:	47c0      	blx	r8
 80033ae:	3001      	adds	r0, #1
 80033b0:	d01e      	beq.n	80033f0 <_printf_common+0xa4>
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	68e5      	ldr	r5, [r4, #12]
 80033b6:	6832      	ldr	r2, [r6, #0]
 80033b8:	f003 0306 	and.w	r3, r3, #6
 80033bc:	2b04      	cmp	r3, #4
 80033be:	bf08      	it	eq
 80033c0:	1aad      	subeq	r5, r5, r2
 80033c2:	68a3      	ldr	r3, [r4, #8]
 80033c4:	6922      	ldr	r2, [r4, #16]
 80033c6:	bf0c      	ite	eq
 80033c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033cc:	2500      	movne	r5, #0
 80033ce:	4293      	cmp	r3, r2
 80033d0:	bfc4      	itt	gt
 80033d2:	1a9b      	subgt	r3, r3, r2
 80033d4:	18ed      	addgt	r5, r5, r3
 80033d6:	2600      	movs	r6, #0
 80033d8:	341a      	adds	r4, #26
 80033da:	42b5      	cmp	r5, r6
 80033dc:	d11a      	bne.n	8003414 <_printf_common+0xc8>
 80033de:	2000      	movs	r0, #0
 80033e0:	e008      	b.n	80033f4 <_printf_common+0xa8>
 80033e2:	2301      	movs	r3, #1
 80033e4:	4652      	mov	r2, sl
 80033e6:	4649      	mov	r1, r9
 80033e8:	4638      	mov	r0, r7
 80033ea:	47c0      	blx	r8
 80033ec:	3001      	adds	r0, #1
 80033ee:	d103      	bne.n	80033f8 <_printf_common+0xac>
 80033f0:	f04f 30ff 	mov.w	r0, #4294967295
 80033f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f8:	3501      	adds	r5, #1
 80033fa:	e7c6      	b.n	800338a <_printf_common+0x3e>
 80033fc:	18e1      	adds	r1, r4, r3
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	2030      	movs	r0, #48	; 0x30
 8003402:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003406:	4422      	add	r2, r4
 8003408:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800340c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003410:	3302      	adds	r3, #2
 8003412:	e7c7      	b.n	80033a4 <_printf_common+0x58>
 8003414:	2301      	movs	r3, #1
 8003416:	4622      	mov	r2, r4
 8003418:	4649      	mov	r1, r9
 800341a:	4638      	mov	r0, r7
 800341c:	47c0      	blx	r8
 800341e:	3001      	adds	r0, #1
 8003420:	d0e6      	beq.n	80033f0 <_printf_common+0xa4>
 8003422:	3601      	adds	r6, #1
 8003424:	e7d9      	b.n	80033da <_printf_common+0x8e>
	...

08003428 <_printf_i>:
 8003428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800342c:	7e0f      	ldrb	r7, [r1, #24]
 800342e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003430:	2f78      	cmp	r7, #120	; 0x78
 8003432:	4691      	mov	r9, r2
 8003434:	4680      	mov	r8, r0
 8003436:	460c      	mov	r4, r1
 8003438:	469a      	mov	sl, r3
 800343a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800343e:	d807      	bhi.n	8003450 <_printf_i+0x28>
 8003440:	2f62      	cmp	r7, #98	; 0x62
 8003442:	d80a      	bhi.n	800345a <_printf_i+0x32>
 8003444:	2f00      	cmp	r7, #0
 8003446:	f000 80d8 	beq.w	80035fa <_printf_i+0x1d2>
 800344a:	2f58      	cmp	r7, #88	; 0x58
 800344c:	f000 80a3 	beq.w	8003596 <_printf_i+0x16e>
 8003450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003454:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003458:	e03a      	b.n	80034d0 <_printf_i+0xa8>
 800345a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800345e:	2b15      	cmp	r3, #21
 8003460:	d8f6      	bhi.n	8003450 <_printf_i+0x28>
 8003462:	a101      	add	r1, pc, #4	; (adr r1, 8003468 <_printf_i+0x40>)
 8003464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003468:	080034c1 	.word	0x080034c1
 800346c:	080034d5 	.word	0x080034d5
 8003470:	08003451 	.word	0x08003451
 8003474:	08003451 	.word	0x08003451
 8003478:	08003451 	.word	0x08003451
 800347c:	08003451 	.word	0x08003451
 8003480:	080034d5 	.word	0x080034d5
 8003484:	08003451 	.word	0x08003451
 8003488:	08003451 	.word	0x08003451
 800348c:	08003451 	.word	0x08003451
 8003490:	08003451 	.word	0x08003451
 8003494:	080035e1 	.word	0x080035e1
 8003498:	08003505 	.word	0x08003505
 800349c:	080035c3 	.word	0x080035c3
 80034a0:	08003451 	.word	0x08003451
 80034a4:	08003451 	.word	0x08003451
 80034a8:	08003603 	.word	0x08003603
 80034ac:	08003451 	.word	0x08003451
 80034b0:	08003505 	.word	0x08003505
 80034b4:	08003451 	.word	0x08003451
 80034b8:	08003451 	.word	0x08003451
 80034bc:	080035cb 	.word	0x080035cb
 80034c0:	682b      	ldr	r3, [r5, #0]
 80034c2:	1d1a      	adds	r2, r3, #4
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	602a      	str	r2, [r5, #0]
 80034c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0a3      	b.n	800361c <_printf_i+0x1f4>
 80034d4:	6820      	ldr	r0, [r4, #0]
 80034d6:	6829      	ldr	r1, [r5, #0]
 80034d8:	0606      	lsls	r6, r0, #24
 80034da:	f101 0304 	add.w	r3, r1, #4
 80034de:	d50a      	bpl.n	80034f6 <_printf_i+0xce>
 80034e0:	680e      	ldr	r6, [r1, #0]
 80034e2:	602b      	str	r3, [r5, #0]
 80034e4:	2e00      	cmp	r6, #0
 80034e6:	da03      	bge.n	80034f0 <_printf_i+0xc8>
 80034e8:	232d      	movs	r3, #45	; 0x2d
 80034ea:	4276      	negs	r6, r6
 80034ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034f0:	485e      	ldr	r0, [pc, #376]	; (800366c <_printf_i+0x244>)
 80034f2:	230a      	movs	r3, #10
 80034f4:	e019      	b.n	800352a <_printf_i+0x102>
 80034f6:	680e      	ldr	r6, [r1, #0]
 80034f8:	602b      	str	r3, [r5, #0]
 80034fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80034fe:	bf18      	it	ne
 8003500:	b236      	sxthne	r6, r6
 8003502:	e7ef      	b.n	80034e4 <_printf_i+0xbc>
 8003504:	682b      	ldr	r3, [r5, #0]
 8003506:	6820      	ldr	r0, [r4, #0]
 8003508:	1d19      	adds	r1, r3, #4
 800350a:	6029      	str	r1, [r5, #0]
 800350c:	0601      	lsls	r1, r0, #24
 800350e:	d501      	bpl.n	8003514 <_printf_i+0xec>
 8003510:	681e      	ldr	r6, [r3, #0]
 8003512:	e002      	b.n	800351a <_printf_i+0xf2>
 8003514:	0646      	lsls	r6, r0, #25
 8003516:	d5fb      	bpl.n	8003510 <_printf_i+0xe8>
 8003518:	881e      	ldrh	r6, [r3, #0]
 800351a:	4854      	ldr	r0, [pc, #336]	; (800366c <_printf_i+0x244>)
 800351c:	2f6f      	cmp	r7, #111	; 0x6f
 800351e:	bf0c      	ite	eq
 8003520:	2308      	moveq	r3, #8
 8003522:	230a      	movne	r3, #10
 8003524:	2100      	movs	r1, #0
 8003526:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800352a:	6865      	ldr	r5, [r4, #4]
 800352c:	60a5      	str	r5, [r4, #8]
 800352e:	2d00      	cmp	r5, #0
 8003530:	bfa2      	ittt	ge
 8003532:	6821      	ldrge	r1, [r4, #0]
 8003534:	f021 0104 	bicge.w	r1, r1, #4
 8003538:	6021      	strge	r1, [r4, #0]
 800353a:	b90e      	cbnz	r6, 8003540 <_printf_i+0x118>
 800353c:	2d00      	cmp	r5, #0
 800353e:	d04d      	beq.n	80035dc <_printf_i+0x1b4>
 8003540:	4615      	mov	r5, r2
 8003542:	fbb6 f1f3 	udiv	r1, r6, r3
 8003546:	fb03 6711 	mls	r7, r3, r1, r6
 800354a:	5dc7      	ldrb	r7, [r0, r7]
 800354c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003550:	4637      	mov	r7, r6
 8003552:	42bb      	cmp	r3, r7
 8003554:	460e      	mov	r6, r1
 8003556:	d9f4      	bls.n	8003542 <_printf_i+0x11a>
 8003558:	2b08      	cmp	r3, #8
 800355a:	d10b      	bne.n	8003574 <_printf_i+0x14c>
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	07de      	lsls	r6, r3, #31
 8003560:	d508      	bpl.n	8003574 <_printf_i+0x14c>
 8003562:	6923      	ldr	r3, [r4, #16]
 8003564:	6861      	ldr	r1, [r4, #4]
 8003566:	4299      	cmp	r1, r3
 8003568:	bfde      	ittt	le
 800356a:	2330      	movle	r3, #48	; 0x30
 800356c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003570:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003574:	1b52      	subs	r2, r2, r5
 8003576:	6122      	str	r2, [r4, #16]
 8003578:	f8cd a000 	str.w	sl, [sp]
 800357c:	464b      	mov	r3, r9
 800357e:	aa03      	add	r2, sp, #12
 8003580:	4621      	mov	r1, r4
 8003582:	4640      	mov	r0, r8
 8003584:	f7ff fee2 	bl	800334c <_printf_common>
 8003588:	3001      	adds	r0, #1
 800358a:	d14c      	bne.n	8003626 <_printf_i+0x1fe>
 800358c:	f04f 30ff 	mov.w	r0, #4294967295
 8003590:	b004      	add	sp, #16
 8003592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003596:	4835      	ldr	r0, [pc, #212]	; (800366c <_printf_i+0x244>)
 8003598:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800359c:	6829      	ldr	r1, [r5, #0]
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80035a4:	6029      	str	r1, [r5, #0]
 80035a6:	061d      	lsls	r5, r3, #24
 80035a8:	d514      	bpl.n	80035d4 <_printf_i+0x1ac>
 80035aa:	07df      	lsls	r7, r3, #31
 80035ac:	bf44      	itt	mi
 80035ae:	f043 0320 	orrmi.w	r3, r3, #32
 80035b2:	6023      	strmi	r3, [r4, #0]
 80035b4:	b91e      	cbnz	r6, 80035be <_printf_i+0x196>
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	f023 0320 	bic.w	r3, r3, #32
 80035bc:	6023      	str	r3, [r4, #0]
 80035be:	2310      	movs	r3, #16
 80035c0:	e7b0      	b.n	8003524 <_printf_i+0xfc>
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	f043 0320 	orr.w	r3, r3, #32
 80035c8:	6023      	str	r3, [r4, #0]
 80035ca:	2378      	movs	r3, #120	; 0x78
 80035cc:	4828      	ldr	r0, [pc, #160]	; (8003670 <_printf_i+0x248>)
 80035ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035d2:	e7e3      	b.n	800359c <_printf_i+0x174>
 80035d4:	0659      	lsls	r1, r3, #25
 80035d6:	bf48      	it	mi
 80035d8:	b2b6      	uxthmi	r6, r6
 80035da:	e7e6      	b.n	80035aa <_printf_i+0x182>
 80035dc:	4615      	mov	r5, r2
 80035de:	e7bb      	b.n	8003558 <_printf_i+0x130>
 80035e0:	682b      	ldr	r3, [r5, #0]
 80035e2:	6826      	ldr	r6, [r4, #0]
 80035e4:	6961      	ldr	r1, [r4, #20]
 80035e6:	1d18      	adds	r0, r3, #4
 80035e8:	6028      	str	r0, [r5, #0]
 80035ea:	0635      	lsls	r5, r6, #24
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	d501      	bpl.n	80035f4 <_printf_i+0x1cc>
 80035f0:	6019      	str	r1, [r3, #0]
 80035f2:	e002      	b.n	80035fa <_printf_i+0x1d2>
 80035f4:	0670      	lsls	r0, r6, #25
 80035f6:	d5fb      	bpl.n	80035f0 <_printf_i+0x1c8>
 80035f8:	8019      	strh	r1, [r3, #0]
 80035fa:	2300      	movs	r3, #0
 80035fc:	6123      	str	r3, [r4, #16]
 80035fe:	4615      	mov	r5, r2
 8003600:	e7ba      	b.n	8003578 <_printf_i+0x150>
 8003602:	682b      	ldr	r3, [r5, #0]
 8003604:	1d1a      	adds	r2, r3, #4
 8003606:	602a      	str	r2, [r5, #0]
 8003608:	681d      	ldr	r5, [r3, #0]
 800360a:	6862      	ldr	r2, [r4, #4]
 800360c:	2100      	movs	r1, #0
 800360e:	4628      	mov	r0, r5
 8003610:	f7fc fdee 	bl	80001f0 <memchr>
 8003614:	b108      	cbz	r0, 800361a <_printf_i+0x1f2>
 8003616:	1b40      	subs	r0, r0, r5
 8003618:	6060      	str	r0, [r4, #4]
 800361a:	6863      	ldr	r3, [r4, #4]
 800361c:	6123      	str	r3, [r4, #16]
 800361e:	2300      	movs	r3, #0
 8003620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003624:	e7a8      	b.n	8003578 <_printf_i+0x150>
 8003626:	6923      	ldr	r3, [r4, #16]
 8003628:	462a      	mov	r2, r5
 800362a:	4649      	mov	r1, r9
 800362c:	4640      	mov	r0, r8
 800362e:	47d0      	blx	sl
 8003630:	3001      	adds	r0, #1
 8003632:	d0ab      	beq.n	800358c <_printf_i+0x164>
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	079b      	lsls	r3, r3, #30
 8003638:	d413      	bmi.n	8003662 <_printf_i+0x23a>
 800363a:	68e0      	ldr	r0, [r4, #12]
 800363c:	9b03      	ldr	r3, [sp, #12]
 800363e:	4298      	cmp	r0, r3
 8003640:	bfb8      	it	lt
 8003642:	4618      	movlt	r0, r3
 8003644:	e7a4      	b.n	8003590 <_printf_i+0x168>
 8003646:	2301      	movs	r3, #1
 8003648:	4632      	mov	r2, r6
 800364a:	4649      	mov	r1, r9
 800364c:	4640      	mov	r0, r8
 800364e:	47d0      	blx	sl
 8003650:	3001      	adds	r0, #1
 8003652:	d09b      	beq.n	800358c <_printf_i+0x164>
 8003654:	3501      	adds	r5, #1
 8003656:	68e3      	ldr	r3, [r4, #12]
 8003658:	9903      	ldr	r1, [sp, #12]
 800365a:	1a5b      	subs	r3, r3, r1
 800365c:	42ab      	cmp	r3, r5
 800365e:	dcf2      	bgt.n	8003646 <_printf_i+0x21e>
 8003660:	e7eb      	b.n	800363a <_printf_i+0x212>
 8003662:	2500      	movs	r5, #0
 8003664:	f104 0619 	add.w	r6, r4, #25
 8003668:	e7f5      	b.n	8003656 <_printf_i+0x22e>
 800366a:	bf00      	nop
 800366c:	08003d31 	.word	0x08003d31
 8003670:	08003d42 	.word	0x08003d42

08003674 <_sbrk_r>:
 8003674:	b538      	push	{r3, r4, r5, lr}
 8003676:	4d06      	ldr	r5, [pc, #24]	; (8003690 <_sbrk_r+0x1c>)
 8003678:	2300      	movs	r3, #0
 800367a:	4604      	mov	r4, r0
 800367c:	4608      	mov	r0, r1
 800367e:	602b      	str	r3, [r5, #0]
 8003680:	f7fd fa7a 	bl	8000b78 <_sbrk>
 8003684:	1c43      	adds	r3, r0, #1
 8003686:	d102      	bne.n	800368e <_sbrk_r+0x1a>
 8003688:	682b      	ldr	r3, [r5, #0]
 800368a:	b103      	cbz	r3, 800368e <_sbrk_r+0x1a>
 800368c:	6023      	str	r3, [r4, #0]
 800368e:	bd38      	pop	{r3, r4, r5, pc}
 8003690:	200005b8 	.word	0x200005b8

08003694 <__sread>:
 8003694:	b510      	push	{r4, lr}
 8003696:	460c      	mov	r4, r1
 8003698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800369c:	f000 fab2 	bl	8003c04 <_read_r>
 80036a0:	2800      	cmp	r0, #0
 80036a2:	bfab      	itete	ge
 80036a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80036a6:	89a3      	ldrhlt	r3, [r4, #12]
 80036a8:	181b      	addge	r3, r3, r0
 80036aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80036ae:	bfac      	ite	ge
 80036b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80036b2:	81a3      	strhlt	r3, [r4, #12]
 80036b4:	bd10      	pop	{r4, pc}

080036b6 <__swrite>:
 80036b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ba:	461f      	mov	r7, r3
 80036bc:	898b      	ldrh	r3, [r1, #12]
 80036be:	05db      	lsls	r3, r3, #23
 80036c0:	4605      	mov	r5, r0
 80036c2:	460c      	mov	r4, r1
 80036c4:	4616      	mov	r6, r2
 80036c6:	d505      	bpl.n	80036d4 <__swrite+0x1e>
 80036c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036cc:	2302      	movs	r3, #2
 80036ce:	2200      	movs	r2, #0
 80036d0:	f000 f9c8 	bl	8003a64 <_lseek_r>
 80036d4:	89a3      	ldrh	r3, [r4, #12]
 80036d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036de:	81a3      	strh	r3, [r4, #12]
 80036e0:	4632      	mov	r2, r6
 80036e2:	463b      	mov	r3, r7
 80036e4:	4628      	mov	r0, r5
 80036e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036ea:	f000 b869 	b.w	80037c0 <_write_r>

080036ee <__sseek>:
 80036ee:	b510      	push	{r4, lr}
 80036f0:	460c      	mov	r4, r1
 80036f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036f6:	f000 f9b5 	bl	8003a64 <_lseek_r>
 80036fa:	1c43      	adds	r3, r0, #1
 80036fc:	89a3      	ldrh	r3, [r4, #12]
 80036fe:	bf15      	itete	ne
 8003700:	6560      	strne	r0, [r4, #84]	; 0x54
 8003702:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003706:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800370a:	81a3      	strheq	r3, [r4, #12]
 800370c:	bf18      	it	ne
 800370e:	81a3      	strhne	r3, [r4, #12]
 8003710:	bd10      	pop	{r4, pc}

08003712 <__sclose>:
 8003712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003716:	f000 b8d3 	b.w	80038c0 <_close_r>
	...

0800371c <__swbuf_r>:
 800371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371e:	460e      	mov	r6, r1
 8003720:	4614      	mov	r4, r2
 8003722:	4605      	mov	r5, r0
 8003724:	b118      	cbz	r0, 800372e <__swbuf_r+0x12>
 8003726:	6983      	ldr	r3, [r0, #24]
 8003728:	b90b      	cbnz	r3, 800372e <__swbuf_r+0x12>
 800372a:	f7ff fb81 	bl	8002e30 <__sinit>
 800372e:	4b21      	ldr	r3, [pc, #132]	; (80037b4 <__swbuf_r+0x98>)
 8003730:	429c      	cmp	r4, r3
 8003732:	d12b      	bne.n	800378c <__swbuf_r+0x70>
 8003734:	686c      	ldr	r4, [r5, #4]
 8003736:	69a3      	ldr	r3, [r4, #24]
 8003738:	60a3      	str	r3, [r4, #8]
 800373a:	89a3      	ldrh	r3, [r4, #12]
 800373c:	071a      	lsls	r2, r3, #28
 800373e:	d52f      	bpl.n	80037a0 <__swbuf_r+0x84>
 8003740:	6923      	ldr	r3, [r4, #16]
 8003742:	b36b      	cbz	r3, 80037a0 <__swbuf_r+0x84>
 8003744:	6923      	ldr	r3, [r4, #16]
 8003746:	6820      	ldr	r0, [r4, #0]
 8003748:	1ac0      	subs	r0, r0, r3
 800374a:	6963      	ldr	r3, [r4, #20]
 800374c:	b2f6      	uxtb	r6, r6
 800374e:	4283      	cmp	r3, r0
 8003750:	4637      	mov	r7, r6
 8003752:	dc04      	bgt.n	800375e <__swbuf_r+0x42>
 8003754:	4621      	mov	r1, r4
 8003756:	4628      	mov	r0, r5
 8003758:	f000 f948 	bl	80039ec <_fflush_r>
 800375c:	bb30      	cbnz	r0, 80037ac <__swbuf_r+0x90>
 800375e:	68a3      	ldr	r3, [r4, #8]
 8003760:	3b01      	subs	r3, #1
 8003762:	60a3      	str	r3, [r4, #8]
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	6022      	str	r2, [r4, #0]
 800376a:	701e      	strb	r6, [r3, #0]
 800376c:	6963      	ldr	r3, [r4, #20]
 800376e:	3001      	adds	r0, #1
 8003770:	4283      	cmp	r3, r0
 8003772:	d004      	beq.n	800377e <__swbuf_r+0x62>
 8003774:	89a3      	ldrh	r3, [r4, #12]
 8003776:	07db      	lsls	r3, r3, #31
 8003778:	d506      	bpl.n	8003788 <__swbuf_r+0x6c>
 800377a:	2e0a      	cmp	r6, #10
 800377c:	d104      	bne.n	8003788 <__swbuf_r+0x6c>
 800377e:	4621      	mov	r1, r4
 8003780:	4628      	mov	r0, r5
 8003782:	f000 f933 	bl	80039ec <_fflush_r>
 8003786:	b988      	cbnz	r0, 80037ac <__swbuf_r+0x90>
 8003788:	4638      	mov	r0, r7
 800378a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800378c:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <__swbuf_r+0x9c>)
 800378e:	429c      	cmp	r4, r3
 8003790:	d101      	bne.n	8003796 <__swbuf_r+0x7a>
 8003792:	68ac      	ldr	r4, [r5, #8]
 8003794:	e7cf      	b.n	8003736 <__swbuf_r+0x1a>
 8003796:	4b09      	ldr	r3, [pc, #36]	; (80037bc <__swbuf_r+0xa0>)
 8003798:	429c      	cmp	r4, r3
 800379a:	bf08      	it	eq
 800379c:	68ec      	ldreq	r4, [r5, #12]
 800379e:	e7ca      	b.n	8003736 <__swbuf_r+0x1a>
 80037a0:	4621      	mov	r1, r4
 80037a2:	4628      	mov	r0, r5
 80037a4:	f000 f81e 	bl	80037e4 <__swsetup_r>
 80037a8:	2800      	cmp	r0, #0
 80037aa:	d0cb      	beq.n	8003744 <__swbuf_r+0x28>
 80037ac:	f04f 37ff 	mov.w	r7, #4294967295
 80037b0:	e7ea      	b.n	8003788 <__swbuf_r+0x6c>
 80037b2:	bf00      	nop
 80037b4:	08003ce0 	.word	0x08003ce0
 80037b8:	08003d00 	.word	0x08003d00
 80037bc:	08003cc0 	.word	0x08003cc0

080037c0 <_write_r>:
 80037c0:	b538      	push	{r3, r4, r5, lr}
 80037c2:	4d07      	ldr	r5, [pc, #28]	; (80037e0 <_write_r+0x20>)
 80037c4:	4604      	mov	r4, r0
 80037c6:	4608      	mov	r0, r1
 80037c8:	4611      	mov	r1, r2
 80037ca:	2200      	movs	r2, #0
 80037cc:	602a      	str	r2, [r5, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	f7fd f981 	bl	8000ad6 <_write>
 80037d4:	1c43      	adds	r3, r0, #1
 80037d6:	d102      	bne.n	80037de <_write_r+0x1e>
 80037d8:	682b      	ldr	r3, [r5, #0]
 80037da:	b103      	cbz	r3, 80037de <_write_r+0x1e>
 80037dc:	6023      	str	r3, [r4, #0]
 80037de:	bd38      	pop	{r3, r4, r5, pc}
 80037e0:	200005b8 	.word	0x200005b8

080037e4 <__swsetup_r>:
 80037e4:	4b32      	ldr	r3, [pc, #200]	; (80038b0 <__swsetup_r+0xcc>)
 80037e6:	b570      	push	{r4, r5, r6, lr}
 80037e8:	681d      	ldr	r5, [r3, #0]
 80037ea:	4606      	mov	r6, r0
 80037ec:	460c      	mov	r4, r1
 80037ee:	b125      	cbz	r5, 80037fa <__swsetup_r+0x16>
 80037f0:	69ab      	ldr	r3, [r5, #24]
 80037f2:	b913      	cbnz	r3, 80037fa <__swsetup_r+0x16>
 80037f4:	4628      	mov	r0, r5
 80037f6:	f7ff fb1b 	bl	8002e30 <__sinit>
 80037fa:	4b2e      	ldr	r3, [pc, #184]	; (80038b4 <__swsetup_r+0xd0>)
 80037fc:	429c      	cmp	r4, r3
 80037fe:	d10f      	bne.n	8003820 <__swsetup_r+0x3c>
 8003800:	686c      	ldr	r4, [r5, #4]
 8003802:	89a3      	ldrh	r3, [r4, #12]
 8003804:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003808:	0719      	lsls	r1, r3, #28
 800380a:	d42c      	bmi.n	8003866 <__swsetup_r+0x82>
 800380c:	06dd      	lsls	r5, r3, #27
 800380e:	d411      	bmi.n	8003834 <__swsetup_r+0x50>
 8003810:	2309      	movs	r3, #9
 8003812:	6033      	str	r3, [r6, #0]
 8003814:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003818:	81a3      	strh	r3, [r4, #12]
 800381a:	f04f 30ff 	mov.w	r0, #4294967295
 800381e:	e03e      	b.n	800389e <__swsetup_r+0xba>
 8003820:	4b25      	ldr	r3, [pc, #148]	; (80038b8 <__swsetup_r+0xd4>)
 8003822:	429c      	cmp	r4, r3
 8003824:	d101      	bne.n	800382a <__swsetup_r+0x46>
 8003826:	68ac      	ldr	r4, [r5, #8]
 8003828:	e7eb      	b.n	8003802 <__swsetup_r+0x1e>
 800382a:	4b24      	ldr	r3, [pc, #144]	; (80038bc <__swsetup_r+0xd8>)
 800382c:	429c      	cmp	r4, r3
 800382e:	bf08      	it	eq
 8003830:	68ec      	ldreq	r4, [r5, #12]
 8003832:	e7e6      	b.n	8003802 <__swsetup_r+0x1e>
 8003834:	0758      	lsls	r0, r3, #29
 8003836:	d512      	bpl.n	800385e <__swsetup_r+0x7a>
 8003838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800383a:	b141      	cbz	r1, 800384e <__swsetup_r+0x6a>
 800383c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003840:	4299      	cmp	r1, r3
 8003842:	d002      	beq.n	800384a <__swsetup_r+0x66>
 8003844:	4630      	mov	r0, r6
 8003846:	f000 f991 	bl	8003b6c <_free_r>
 800384a:	2300      	movs	r3, #0
 800384c:	6363      	str	r3, [r4, #52]	; 0x34
 800384e:	89a3      	ldrh	r3, [r4, #12]
 8003850:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003854:	81a3      	strh	r3, [r4, #12]
 8003856:	2300      	movs	r3, #0
 8003858:	6063      	str	r3, [r4, #4]
 800385a:	6923      	ldr	r3, [r4, #16]
 800385c:	6023      	str	r3, [r4, #0]
 800385e:	89a3      	ldrh	r3, [r4, #12]
 8003860:	f043 0308 	orr.w	r3, r3, #8
 8003864:	81a3      	strh	r3, [r4, #12]
 8003866:	6923      	ldr	r3, [r4, #16]
 8003868:	b94b      	cbnz	r3, 800387e <__swsetup_r+0x9a>
 800386a:	89a3      	ldrh	r3, [r4, #12]
 800386c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003874:	d003      	beq.n	800387e <__swsetup_r+0x9a>
 8003876:	4621      	mov	r1, r4
 8003878:	4630      	mov	r0, r6
 800387a:	f000 f92b 	bl	8003ad4 <__smakebuf_r>
 800387e:	89a0      	ldrh	r0, [r4, #12]
 8003880:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003884:	f010 0301 	ands.w	r3, r0, #1
 8003888:	d00a      	beq.n	80038a0 <__swsetup_r+0xbc>
 800388a:	2300      	movs	r3, #0
 800388c:	60a3      	str	r3, [r4, #8]
 800388e:	6963      	ldr	r3, [r4, #20]
 8003890:	425b      	negs	r3, r3
 8003892:	61a3      	str	r3, [r4, #24]
 8003894:	6923      	ldr	r3, [r4, #16]
 8003896:	b943      	cbnz	r3, 80038aa <__swsetup_r+0xc6>
 8003898:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800389c:	d1ba      	bne.n	8003814 <__swsetup_r+0x30>
 800389e:	bd70      	pop	{r4, r5, r6, pc}
 80038a0:	0781      	lsls	r1, r0, #30
 80038a2:	bf58      	it	pl
 80038a4:	6963      	ldrpl	r3, [r4, #20]
 80038a6:	60a3      	str	r3, [r4, #8]
 80038a8:	e7f4      	b.n	8003894 <__swsetup_r+0xb0>
 80038aa:	2000      	movs	r0, #0
 80038ac:	e7f7      	b.n	800389e <__swsetup_r+0xba>
 80038ae:	bf00      	nop
 80038b0:	2000000c 	.word	0x2000000c
 80038b4:	08003ce0 	.word	0x08003ce0
 80038b8:	08003d00 	.word	0x08003d00
 80038bc:	08003cc0 	.word	0x08003cc0

080038c0 <_close_r>:
 80038c0:	b538      	push	{r3, r4, r5, lr}
 80038c2:	4d06      	ldr	r5, [pc, #24]	; (80038dc <_close_r+0x1c>)
 80038c4:	2300      	movs	r3, #0
 80038c6:	4604      	mov	r4, r0
 80038c8:	4608      	mov	r0, r1
 80038ca:	602b      	str	r3, [r5, #0]
 80038cc:	f7fd f91f 	bl	8000b0e <_close>
 80038d0:	1c43      	adds	r3, r0, #1
 80038d2:	d102      	bne.n	80038da <_close_r+0x1a>
 80038d4:	682b      	ldr	r3, [r5, #0]
 80038d6:	b103      	cbz	r3, 80038da <_close_r+0x1a>
 80038d8:	6023      	str	r3, [r4, #0]
 80038da:	bd38      	pop	{r3, r4, r5, pc}
 80038dc:	200005b8 	.word	0x200005b8

080038e0 <__sflush_r>:
 80038e0:	898a      	ldrh	r2, [r1, #12]
 80038e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038e6:	4605      	mov	r5, r0
 80038e8:	0710      	lsls	r0, r2, #28
 80038ea:	460c      	mov	r4, r1
 80038ec:	d458      	bmi.n	80039a0 <__sflush_r+0xc0>
 80038ee:	684b      	ldr	r3, [r1, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	dc05      	bgt.n	8003900 <__sflush_r+0x20>
 80038f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	dc02      	bgt.n	8003900 <__sflush_r+0x20>
 80038fa:	2000      	movs	r0, #0
 80038fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003900:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003902:	2e00      	cmp	r6, #0
 8003904:	d0f9      	beq.n	80038fa <__sflush_r+0x1a>
 8003906:	2300      	movs	r3, #0
 8003908:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800390c:	682f      	ldr	r7, [r5, #0]
 800390e:	602b      	str	r3, [r5, #0]
 8003910:	d032      	beq.n	8003978 <__sflush_r+0x98>
 8003912:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003914:	89a3      	ldrh	r3, [r4, #12]
 8003916:	075a      	lsls	r2, r3, #29
 8003918:	d505      	bpl.n	8003926 <__sflush_r+0x46>
 800391a:	6863      	ldr	r3, [r4, #4]
 800391c:	1ac0      	subs	r0, r0, r3
 800391e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003920:	b10b      	cbz	r3, 8003926 <__sflush_r+0x46>
 8003922:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003924:	1ac0      	subs	r0, r0, r3
 8003926:	2300      	movs	r3, #0
 8003928:	4602      	mov	r2, r0
 800392a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800392c:	6a21      	ldr	r1, [r4, #32]
 800392e:	4628      	mov	r0, r5
 8003930:	47b0      	blx	r6
 8003932:	1c43      	adds	r3, r0, #1
 8003934:	89a3      	ldrh	r3, [r4, #12]
 8003936:	d106      	bne.n	8003946 <__sflush_r+0x66>
 8003938:	6829      	ldr	r1, [r5, #0]
 800393a:	291d      	cmp	r1, #29
 800393c:	d82c      	bhi.n	8003998 <__sflush_r+0xb8>
 800393e:	4a2a      	ldr	r2, [pc, #168]	; (80039e8 <__sflush_r+0x108>)
 8003940:	40ca      	lsrs	r2, r1
 8003942:	07d6      	lsls	r6, r2, #31
 8003944:	d528      	bpl.n	8003998 <__sflush_r+0xb8>
 8003946:	2200      	movs	r2, #0
 8003948:	6062      	str	r2, [r4, #4]
 800394a:	04d9      	lsls	r1, r3, #19
 800394c:	6922      	ldr	r2, [r4, #16]
 800394e:	6022      	str	r2, [r4, #0]
 8003950:	d504      	bpl.n	800395c <__sflush_r+0x7c>
 8003952:	1c42      	adds	r2, r0, #1
 8003954:	d101      	bne.n	800395a <__sflush_r+0x7a>
 8003956:	682b      	ldr	r3, [r5, #0]
 8003958:	b903      	cbnz	r3, 800395c <__sflush_r+0x7c>
 800395a:	6560      	str	r0, [r4, #84]	; 0x54
 800395c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800395e:	602f      	str	r7, [r5, #0]
 8003960:	2900      	cmp	r1, #0
 8003962:	d0ca      	beq.n	80038fa <__sflush_r+0x1a>
 8003964:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003968:	4299      	cmp	r1, r3
 800396a:	d002      	beq.n	8003972 <__sflush_r+0x92>
 800396c:	4628      	mov	r0, r5
 800396e:	f000 f8fd 	bl	8003b6c <_free_r>
 8003972:	2000      	movs	r0, #0
 8003974:	6360      	str	r0, [r4, #52]	; 0x34
 8003976:	e7c1      	b.n	80038fc <__sflush_r+0x1c>
 8003978:	6a21      	ldr	r1, [r4, #32]
 800397a:	2301      	movs	r3, #1
 800397c:	4628      	mov	r0, r5
 800397e:	47b0      	blx	r6
 8003980:	1c41      	adds	r1, r0, #1
 8003982:	d1c7      	bne.n	8003914 <__sflush_r+0x34>
 8003984:	682b      	ldr	r3, [r5, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0c4      	beq.n	8003914 <__sflush_r+0x34>
 800398a:	2b1d      	cmp	r3, #29
 800398c:	d001      	beq.n	8003992 <__sflush_r+0xb2>
 800398e:	2b16      	cmp	r3, #22
 8003990:	d101      	bne.n	8003996 <__sflush_r+0xb6>
 8003992:	602f      	str	r7, [r5, #0]
 8003994:	e7b1      	b.n	80038fa <__sflush_r+0x1a>
 8003996:	89a3      	ldrh	r3, [r4, #12]
 8003998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800399c:	81a3      	strh	r3, [r4, #12]
 800399e:	e7ad      	b.n	80038fc <__sflush_r+0x1c>
 80039a0:	690f      	ldr	r7, [r1, #16]
 80039a2:	2f00      	cmp	r7, #0
 80039a4:	d0a9      	beq.n	80038fa <__sflush_r+0x1a>
 80039a6:	0793      	lsls	r3, r2, #30
 80039a8:	680e      	ldr	r6, [r1, #0]
 80039aa:	bf08      	it	eq
 80039ac:	694b      	ldreq	r3, [r1, #20]
 80039ae:	600f      	str	r7, [r1, #0]
 80039b0:	bf18      	it	ne
 80039b2:	2300      	movne	r3, #0
 80039b4:	eba6 0807 	sub.w	r8, r6, r7
 80039b8:	608b      	str	r3, [r1, #8]
 80039ba:	f1b8 0f00 	cmp.w	r8, #0
 80039be:	dd9c      	ble.n	80038fa <__sflush_r+0x1a>
 80039c0:	6a21      	ldr	r1, [r4, #32]
 80039c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80039c4:	4643      	mov	r3, r8
 80039c6:	463a      	mov	r2, r7
 80039c8:	4628      	mov	r0, r5
 80039ca:	47b0      	blx	r6
 80039cc:	2800      	cmp	r0, #0
 80039ce:	dc06      	bgt.n	80039de <__sflush_r+0xfe>
 80039d0:	89a3      	ldrh	r3, [r4, #12]
 80039d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039d6:	81a3      	strh	r3, [r4, #12]
 80039d8:	f04f 30ff 	mov.w	r0, #4294967295
 80039dc:	e78e      	b.n	80038fc <__sflush_r+0x1c>
 80039de:	4407      	add	r7, r0
 80039e0:	eba8 0800 	sub.w	r8, r8, r0
 80039e4:	e7e9      	b.n	80039ba <__sflush_r+0xda>
 80039e6:	bf00      	nop
 80039e8:	20400001 	.word	0x20400001

080039ec <_fflush_r>:
 80039ec:	b538      	push	{r3, r4, r5, lr}
 80039ee:	690b      	ldr	r3, [r1, #16]
 80039f0:	4605      	mov	r5, r0
 80039f2:	460c      	mov	r4, r1
 80039f4:	b913      	cbnz	r3, 80039fc <_fflush_r+0x10>
 80039f6:	2500      	movs	r5, #0
 80039f8:	4628      	mov	r0, r5
 80039fa:	bd38      	pop	{r3, r4, r5, pc}
 80039fc:	b118      	cbz	r0, 8003a06 <_fflush_r+0x1a>
 80039fe:	6983      	ldr	r3, [r0, #24]
 8003a00:	b90b      	cbnz	r3, 8003a06 <_fflush_r+0x1a>
 8003a02:	f7ff fa15 	bl	8002e30 <__sinit>
 8003a06:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <_fflush_r+0x6c>)
 8003a08:	429c      	cmp	r4, r3
 8003a0a:	d11b      	bne.n	8003a44 <_fflush_r+0x58>
 8003a0c:	686c      	ldr	r4, [r5, #4]
 8003a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0ef      	beq.n	80039f6 <_fflush_r+0xa>
 8003a16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a18:	07d0      	lsls	r0, r2, #31
 8003a1a:	d404      	bmi.n	8003a26 <_fflush_r+0x3a>
 8003a1c:	0599      	lsls	r1, r3, #22
 8003a1e:	d402      	bmi.n	8003a26 <_fflush_r+0x3a>
 8003a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a22:	f7ff faa3 	bl	8002f6c <__retarget_lock_acquire_recursive>
 8003a26:	4628      	mov	r0, r5
 8003a28:	4621      	mov	r1, r4
 8003a2a:	f7ff ff59 	bl	80038e0 <__sflush_r>
 8003a2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a30:	07da      	lsls	r2, r3, #31
 8003a32:	4605      	mov	r5, r0
 8003a34:	d4e0      	bmi.n	80039f8 <_fflush_r+0xc>
 8003a36:	89a3      	ldrh	r3, [r4, #12]
 8003a38:	059b      	lsls	r3, r3, #22
 8003a3a:	d4dd      	bmi.n	80039f8 <_fflush_r+0xc>
 8003a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a3e:	f7ff fa96 	bl	8002f6e <__retarget_lock_release_recursive>
 8003a42:	e7d9      	b.n	80039f8 <_fflush_r+0xc>
 8003a44:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <_fflush_r+0x70>)
 8003a46:	429c      	cmp	r4, r3
 8003a48:	d101      	bne.n	8003a4e <_fflush_r+0x62>
 8003a4a:	68ac      	ldr	r4, [r5, #8]
 8003a4c:	e7df      	b.n	8003a0e <_fflush_r+0x22>
 8003a4e:	4b04      	ldr	r3, [pc, #16]	; (8003a60 <_fflush_r+0x74>)
 8003a50:	429c      	cmp	r4, r3
 8003a52:	bf08      	it	eq
 8003a54:	68ec      	ldreq	r4, [r5, #12]
 8003a56:	e7da      	b.n	8003a0e <_fflush_r+0x22>
 8003a58:	08003ce0 	.word	0x08003ce0
 8003a5c:	08003d00 	.word	0x08003d00
 8003a60:	08003cc0 	.word	0x08003cc0

08003a64 <_lseek_r>:
 8003a64:	b538      	push	{r3, r4, r5, lr}
 8003a66:	4d07      	ldr	r5, [pc, #28]	; (8003a84 <_lseek_r+0x20>)
 8003a68:	4604      	mov	r4, r0
 8003a6a:	4608      	mov	r0, r1
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	2200      	movs	r2, #0
 8003a70:	602a      	str	r2, [r5, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	f7fd f872 	bl	8000b5c <_lseek>
 8003a78:	1c43      	adds	r3, r0, #1
 8003a7a:	d102      	bne.n	8003a82 <_lseek_r+0x1e>
 8003a7c:	682b      	ldr	r3, [r5, #0]
 8003a7e:	b103      	cbz	r3, 8003a82 <_lseek_r+0x1e>
 8003a80:	6023      	str	r3, [r4, #0]
 8003a82:	bd38      	pop	{r3, r4, r5, pc}
 8003a84:	200005b8 	.word	0x200005b8

08003a88 <__swhatbuf_r>:
 8003a88:	b570      	push	{r4, r5, r6, lr}
 8003a8a:	460e      	mov	r6, r1
 8003a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a90:	2900      	cmp	r1, #0
 8003a92:	b096      	sub	sp, #88	; 0x58
 8003a94:	4614      	mov	r4, r2
 8003a96:	461d      	mov	r5, r3
 8003a98:	da08      	bge.n	8003aac <__swhatbuf_r+0x24>
 8003a9a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	602a      	str	r2, [r5, #0]
 8003aa2:	061a      	lsls	r2, r3, #24
 8003aa4:	d410      	bmi.n	8003ac8 <__swhatbuf_r+0x40>
 8003aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aaa:	e00e      	b.n	8003aca <__swhatbuf_r+0x42>
 8003aac:	466a      	mov	r2, sp
 8003aae:	f000 f8bb 	bl	8003c28 <_fstat_r>
 8003ab2:	2800      	cmp	r0, #0
 8003ab4:	dbf1      	blt.n	8003a9a <__swhatbuf_r+0x12>
 8003ab6:	9a01      	ldr	r2, [sp, #4]
 8003ab8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003abc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ac0:	425a      	negs	r2, r3
 8003ac2:	415a      	adcs	r2, r3
 8003ac4:	602a      	str	r2, [r5, #0]
 8003ac6:	e7ee      	b.n	8003aa6 <__swhatbuf_r+0x1e>
 8003ac8:	2340      	movs	r3, #64	; 0x40
 8003aca:	2000      	movs	r0, #0
 8003acc:	6023      	str	r3, [r4, #0]
 8003ace:	b016      	add	sp, #88	; 0x58
 8003ad0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ad4 <__smakebuf_r>:
 8003ad4:	898b      	ldrh	r3, [r1, #12]
 8003ad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ad8:	079d      	lsls	r5, r3, #30
 8003ada:	4606      	mov	r6, r0
 8003adc:	460c      	mov	r4, r1
 8003ade:	d507      	bpl.n	8003af0 <__smakebuf_r+0x1c>
 8003ae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	6123      	str	r3, [r4, #16]
 8003ae8:	2301      	movs	r3, #1
 8003aea:	6163      	str	r3, [r4, #20]
 8003aec:	b002      	add	sp, #8
 8003aee:	bd70      	pop	{r4, r5, r6, pc}
 8003af0:	ab01      	add	r3, sp, #4
 8003af2:	466a      	mov	r2, sp
 8003af4:	f7ff ffc8 	bl	8003a88 <__swhatbuf_r>
 8003af8:	9900      	ldr	r1, [sp, #0]
 8003afa:	4605      	mov	r5, r0
 8003afc:	4630      	mov	r0, r6
 8003afe:	f7ff fa57 	bl	8002fb0 <_malloc_r>
 8003b02:	b948      	cbnz	r0, 8003b18 <__smakebuf_r+0x44>
 8003b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b08:	059a      	lsls	r2, r3, #22
 8003b0a:	d4ef      	bmi.n	8003aec <__smakebuf_r+0x18>
 8003b0c:	f023 0303 	bic.w	r3, r3, #3
 8003b10:	f043 0302 	orr.w	r3, r3, #2
 8003b14:	81a3      	strh	r3, [r4, #12]
 8003b16:	e7e3      	b.n	8003ae0 <__smakebuf_r+0xc>
 8003b18:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <__smakebuf_r+0x7c>)
 8003b1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b1c:	89a3      	ldrh	r3, [r4, #12]
 8003b1e:	6020      	str	r0, [r4, #0]
 8003b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b24:	81a3      	strh	r3, [r4, #12]
 8003b26:	9b00      	ldr	r3, [sp, #0]
 8003b28:	6163      	str	r3, [r4, #20]
 8003b2a:	9b01      	ldr	r3, [sp, #4]
 8003b2c:	6120      	str	r0, [r4, #16]
 8003b2e:	b15b      	cbz	r3, 8003b48 <__smakebuf_r+0x74>
 8003b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b34:	4630      	mov	r0, r6
 8003b36:	f000 f889 	bl	8003c4c <_isatty_r>
 8003b3a:	b128      	cbz	r0, 8003b48 <__smakebuf_r+0x74>
 8003b3c:	89a3      	ldrh	r3, [r4, #12]
 8003b3e:	f023 0303 	bic.w	r3, r3, #3
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	81a3      	strh	r3, [r4, #12]
 8003b48:	89a0      	ldrh	r0, [r4, #12]
 8003b4a:	4305      	orrs	r5, r0
 8003b4c:	81a5      	strh	r5, [r4, #12]
 8003b4e:	e7cd      	b.n	8003aec <__smakebuf_r+0x18>
 8003b50:	08002dc9 	.word	0x08002dc9

08003b54 <__malloc_lock>:
 8003b54:	4801      	ldr	r0, [pc, #4]	; (8003b5c <__malloc_lock+0x8>)
 8003b56:	f7ff ba09 	b.w	8002f6c <__retarget_lock_acquire_recursive>
 8003b5a:	bf00      	nop
 8003b5c:	200005ac 	.word	0x200005ac

08003b60 <__malloc_unlock>:
 8003b60:	4801      	ldr	r0, [pc, #4]	; (8003b68 <__malloc_unlock+0x8>)
 8003b62:	f7ff ba04 	b.w	8002f6e <__retarget_lock_release_recursive>
 8003b66:	bf00      	nop
 8003b68:	200005ac 	.word	0x200005ac

08003b6c <_free_r>:
 8003b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b6e:	2900      	cmp	r1, #0
 8003b70:	d044      	beq.n	8003bfc <_free_r+0x90>
 8003b72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b76:	9001      	str	r0, [sp, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f1a1 0404 	sub.w	r4, r1, #4
 8003b7e:	bfb8      	it	lt
 8003b80:	18e4      	addlt	r4, r4, r3
 8003b82:	f7ff ffe7 	bl	8003b54 <__malloc_lock>
 8003b86:	4a1e      	ldr	r2, [pc, #120]	; (8003c00 <_free_r+0x94>)
 8003b88:	9801      	ldr	r0, [sp, #4]
 8003b8a:	6813      	ldr	r3, [r2, #0]
 8003b8c:	b933      	cbnz	r3, 8003b9c <_free_r+0x30>
 8003b8e:	6063      	str	r3, [r4, #4]
 8003b90:	6014      	str	r4, [r2, #0]
 8003b92:	b003      	add	sp, #12
 8003b94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b98:	f7ff bfe2 	b.w	8003b60 <__malloc_unlock>
 8003b9c:	42a3      	cmp	r3, r4
 8003b9e:	d908      	bls.n	8003bb2 <_free_r+0x46>
 8003ba0:	6825      	ldr	r5, [r4, #0]
 8003ba2:	1961      	adds	r1, r4, r5
 8003ba4:	428b      	cmp	r3, r1
 8003ba6:	bf01      	itttt	eq
 8003ba8:	6819      	ldreq	r1, [r3, #0]
 8003baa:	685b      	ldreq	r3, [r3, #4]
 8003bac:	1949      	addeq	r1, r1, r5
 8003bae:	6021      	streq	r1, [r4, #0]
 8003bb0:	e7ed      	b.n	8003b8e <_free_r+0x22>
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	b10b      	cbz	r3, 8003bbc <_free_r+0x50>
 8003bb8:	42a3      	cmp	r3, r4
 8003bba:	d9fa      	bls.n	8003bb2 <_free_r+0x46>
 8003bbc:	6811      	ldr	r1, [r2, #0]
 8003bbe:	1855      	adds	r5, r2, r1
 8003bc0:	42a5      	cmp	r5, r4
 8003bc2:	d10b      	bne.n	8003bdc <_free_r+0x70>
 8003bc4:	6824      	ldr	r4, [r4, #0]
 8003bc6:	4421      	add	r1, r4
 8003bc8:	1854      	adds	r4, r2, r1
 8003bca:	42a3      	cmp	r3, r4
 8003bcc:	6011      	str	r1, [r2, #0]
 8003bce:	d1e0      	bne.n	8003b92 <_free_r+0x26>
 8003bd0:	681c      	ldr	r4, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	6053      	str	r3, [r2, #4]
 8003bd6:	4421      	add	r1, r4
 8003bd8:	6011      	str	r1, [r2, #0]
 8003bda:	e7da      	b.n	8003b92 <_free_r+0x26>
 8003bdc:	d902      	bls.n	8003be4 <_free_r+0x78>
 8003bde:	230c      	movs	r3, #12
 8003be0:	6003      	str	r3, [r0, #0]
 8003be2:	e7d6      	b.n	8003b92 <_free_r+0x26>
 8003be4:	6825      	ldr	r5, [r4, #0]
 8003be6:	1961      	adds	r1, r4, r5
 8003be8:	428b      	cmp	r3, r1
 8003bea:	bf04      	itt	eq
 8003bec:	6819      	ldreq	r1, [r3, #0]
 8003bee:	685b      	ldreq	r3, [r3, #4]
 8003bf0:	6063      	str	r3, [r4, #4]
 8003bf2:	bf04      	itt	eq
 8003bf4:	1949      	addeq	r1, r1, r5
 8003bf6:	6021      	streq	r1, [r4, #0]
 8003bf8:	6054      	str	r4, [r2, #4]
 8003bfa:	e7ca      	b.n	8003b92 <_free_r+0x26>
 8003bfc:	b003      	add	sp, #12
 8003bfe:	bd30      	pop	{r4, r5, pc}
 8003c00:	200005b0 	.word	0x200005b0

08003c04 <_read_r>:
 8003c04:	b538      	push	{r3, r4, r5, lr}
 8003c06:	4d07      	ldr	r5, [pc, #28]	; (8003c24 <_read_r+0x20>)
 8003c08:	4604      	mov	r4, r0
 8003c0a:	4608      	mov	r0, r1
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	2200      	movs	r2, #0
 8003c10:	602a      	str	r2, [r5, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	f7fc ff42 	bl	8000a9c <_read>
 8003c18:	1c43      	adds	r3, r0, #1
 8003c1a:	d102      	bne.n	8003c22 <_read_r+0x1e>
 8003c1c:	682b      	ldr	r3, [r5, #0]
 8003c1e:	b103      	cbz	r3, 8003c22 <_read_r+0x1e>
 8003c20:	6023      	str	r3, [r4, #0]
 8003c22:	bd38      	pop	{r3, r4, r5, pc}
 8003c24:	200005b8 	.word	0x200005b8

08003c28 <_fstat_r>:
 8003c28:	b538      	push	{r3, r4, r5, lr}
 8003c2a:	4d07      	ldr	r5, [pc, #28]	; (8003c48 <_fstat_r+0x20>)
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	4604      	mov	r4, r0
 8003c30:	4608      	mov	r0, r1
 8003c32:	4611      	mov	r1, r2
 8003c34:	602b      	str	r3, [r5, #0]
 8003c36:	f7fc ff76 	bl	8000b26 <_fstat>
 8003c3a:	1c43      	adds	r3, r0, #1
 8003c3c:	d102      	bne.n	8003c44 <_fstat_r+0x1c>
 8003c3e:	682b      	ldr	r3, [r5, #0]
 8003c40:	b103      	cbz	r3, 8003c44 <_fstat_r+0x1c>
 8003c42:	6023      	str	r3, [r4, #0]
 8003c44:	bd38      	pop	{r3, r4, r5, pc}
 8003c46:	bf00      	nop
 8003c48:	200005b8 	.word	0x200005b8

08003c4c <_isatty_r>:
 8003c4c:	b538      	push	{r3, r4, r5, lr}
 8003c4e:	4d06      	ldr	r5, [pc, #24]	; (8003c68 <_isatty_r+0x1c>)
 8003c50:	2300      	movs	r3, #0
 8003c52:	4604      	mov	r4, r0
 8003c54:	4608      	mov	r0, r1
 8003c56:	602b      	str	r3, [r5, #0]
 8003c58:	f7fc ff75 	bl	8000b46 <_isatty>
 8003c5c:	1c43      	adds	r3, r0, #1
 8003c5e:	d102      	bne.n	8003c66 <_isatty_r+0x1a>
 8003c60:	682b      	ldr	r3, [r5, #0]
 8003c62:	b103      	cbz	r3, 8003c66 <_isatty_r+0x1a>
 8003c64:	6023      	str	r3, [r4, #0]
 8003c66:	bd38      	pop	{r3, r4, r5, pc}
 8003c68:	200005b8 	.word	0x200005b8

08003c6c <_init>:
 8003c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6e:	bf00      	nop
 8003c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c72:	bc08      	pop	{r3}
 8003c74:	469e      	mov	lr, r3
 8003c76:	4770      	bx	lr

08003c78 <_fini>:
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	bf00      	nop
 8003c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7e:	bc08      	pop	{r3}
 8003c80:	469e      	mov	lr, r3
 8003c82:	4770      	bx	lr
